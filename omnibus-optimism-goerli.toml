name = "synthetix-omnibus"
version = "3.2.1-dev.0a0bee1a"
description = "Includes the full synthetix system with configurations applied"
include = [
    "tomls/settings-testnet.toml",
    "tomls/core.toml",
    "tomls/permissions.toml",

    "tomls/collaterals/snx.toml",
    "tomls/collaterals/weth.toml",

    "tomls/pools/spartan-council.toml",
    "tomls/pools/passive-snx.toml",

    "tomls/permit-all-createPool.toml",
    "tomls/permit-all-registerMarket.toml",
    "tomls/permit-all-perps-createAccount.toml",
    "tomls/permit-all-transferCrossChain.toml",

    "tomls/markets/spot/eth.toml",
    "tomls/markets/spot/btc.toml",
    "tomls/markets/spot/link.toml",

    "tomls/markets/perps/eth.toml",
    "tomls/markets/perps/btc.toml",

		# overrides for the oracles (will replace imports from above modules to use pyth instead of chainlink)
		# "tomls/oracles/pyth-eth.toml",
		# "tomls/oracles/pyth-btc.toml",
		# "tomls/oracles/pyth-snx.toml",
		# "tomls/oracles/pyth-link.toml",
		# "tomls/oracles/pyth-op.toml",

    # overrides for perp markets
    "tomls/omnibus-optimism-goerli/perps/global.toml",
    "tomls/omnibus-optimism-goerli/perps/btc.toml",
    "tomls/omnibus-optimism-goerli/perps/eth.toml",

    # overrides for synth markets
    "tomls/omnibus-optimism-goerli/synths/btc.toml",
    "tomls/omnibus-optimism-goerli/synths/eth.toml",
    "tomls/omnibus-optimism-goerli/synths/link.toml",
]

[setting.owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.weth_address]
defaultValue = "0x4200000000000000000000000000000000000006"

[setting.snx_address]
defaultValue = "0x2E5ED97596a8368EB9E44B1f3F25B2E813845303"

[setting.weth_aggregator_address]
defaultValue = "0xcD2A119bD1F7DF95d706DE6F2057fDD45A0503E2"

[setting.eth_aggregator_address]
defaultValue = "0x2A19D346e940174E1b97199adAB9D07F13508A3A"

[setting.btc_aggregator_address]
defaultValue = "0x2A19D346e940174E1b97199adAB9D07F13508A3A"

[setting.snx_aggregator_address]
defaultValue = "0x89A7630f46B8c35A7fBBC4f6e4783f1E2DC715c6"

[setting.minimum_liquidity_ratio]
defaultValue = "2000000000000000000"

[setting.account_timeout_withdraw]
defaultValue = "86400"

[setting.deployer]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.sc_pool_id]
defaultValue = "1"

[setting.sc_pool_owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.snx_pool_id]
defaultValue = "69"

[setting.snx_pool_owner]
defaultValue = "<%= settings.sc_pool_owner %>"

[setting.snx_liquidation_reward]
defaultValue = "10000000000000000000"

[setting.ccip_router]
defaultValue = "0xeb52e9ae4a9fb37172978642d4c141ef53876f26"

[setting.ccip_token_pool]
defaultValue = "0xd23c2ef3a533040b57cadaf33ccb111edbaca018"

# Perps Global Configuration
# TODO: move these into perps-factory once settings support max uint

[setting.perpsBtcSynthMaxCollateralAmount]
defaultValue = "<%= MaxUint256 %>"

[setting.perpsEthSynthMaxCollateralAmount]
defaultValue = "<%= MaxUint256 %>"

[invoke.setPerpsMaxCollateralForSnxUsd]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxCollateralAmount"
args = [
  "0",
  "<%= MaxUint256 %>"
]
depends = ["provision.perpsFactory"]

[invoke.setPerpsSynthDeductionPriority]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSynthDeductionPriority"
args = [["0", "<%= extras.synth_eth_market_id %>"]]
depends = ["invoke.createEthSynth", "provision.perpsFactory"]

[setting.perpsMinLiquidationReward]
defaultValue = "1"

[setting.perpsMaxLiquidationReward]
defaultValue = "500"

[invoke.setPerpsProxyCustomTransactorOnEthSynthMarket]
target = ["spotFactory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_eth_market_id %>"]
func = "setCustomTransactorFees"
args = [
  "<%= extras.synth_eth_market_id %>",
  "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>",
  "<%= parseEther('0.0001') %>"
]
depends=["provision.perpsFactory", "invoke.createEthSynth"]

[invoke.setPerpsProxyCustomTransactorOnBtcSynthMarket]
target = ["spotFactory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_btc_market_id %>"]
func = "setCustomTransactorFees"
args = [
  "<%= extras.synth_btc_market_id %>",
  "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>",
  "<%= parseEther('0.0001') %>"
]
depends=["provision.perpsFactory", "invoke.createBtcSynth"]

# ETH Synth configuration on Core system
[invoke.configuresETHCollateral]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "configureCollateral"
args = [
  { tokenAddress = "<%= settings.ethSynthAddress %>", oracleNodeId = "<%= extras.eth_oracle_id %>", issuanceRatioD18 = "<%= parseEther('2') %>", liquidationRatioD18 = "<%= parseEther('1.1') %>", liquidationRewardD18 = "<%= parseEther('1') %>", minDelegationD18 = "<%= parseEther('1') %>", depositingEnabled = false }
]
depends = [
  "invoke.setSynthPriceEth"
]

# Note: this is now added to the event but because the synth is already created
# we need to manually set it here
[setting.btcSynthAddress]
defaultValue = "0x4bC137c51c21bFf2A78073809605C2CEA80A06A1"

# ETH Synth Configuration

# Note: this is now added to the event but because the synth is already created
# we need to manually set it here
[setting.ethSynthAddress]
defaultValue = "0xDc6cad7F32cE7249f6f77a06bdcF143684Af61D4"

[invoke.configuresETHMaxMarketCollateral]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "configureMaximumMarketCollateral"
args = [
  "<%= imports.perpsFactory.extras.superMarketId %>",
  "<%= settings.ethSynthAddress %>",
  "<%= MaxUint256 %>"
]
depends = [
  "provision.perpsFactory", "invoke.configuresETHCollateral"
]

# BTC Synth Configuration
[invoke.configuresBTCCollateral]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "configureCollateral"
args = [
  { tokenAddress = "<%= settings.btcSynthAddress %>", oracleNodeId = "<%= extras.btc_oracle_id %>", issuanceRatioD18 = "<%= parseEther('2') %>", liquidationRatioD18 = "<%= parseEther('1.1') %>", liquidationRewardD18 = "<%= parseEther('0.5') %>", minDelegationD18 = "<%= parseEther('0.5') %>", depositingEnabled = false }
]
depends = [
  "invoke.setSynthPriceBtc"
]

[invoke.configuresBTCMaxMarketCollateral]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "configureMaximumMarketCollateral"
args = [
  "<%= imports.perpsFactory.extras.superMarketId %>",
  "<%= settings.btcSynthAddress %>",
  "<%= MaxUint256 %>"
]
depends = [
  "provision.perpsFactory", "invoke.configuresETHCollateral"
]

# Pyth settlement strategy config
[setting.pythFeedUrl]
defaultValue = "https://api.synthetix.io/pyth-testnet/api/get_vaa_ccip?data={data}"

[setting.pythPriceVerificationAddress]
defaultValue = "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"

[invoke.setScPoolConfig]
target = ["system.CoreProxy"]
fromCall.func = "getPoolOwner"
fromCall.args = ["<%= settings.sc_pool_id %>"]
func = "setPoolConfiguration"
args = [
    "<%= settings.sc_pool_id %>",
    [
        { marketId = "<%= extras.synth_btc_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= extras.synth_eth_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= extras.synth_link_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= imports.perpsFactory.extras.superMarketId %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" }
    ],
]

depends=["invoke.createScPool", "invoke.createEthSynth", "invoke.createBtcSynth", "invoke.createLinkSynth", "provision.perpsFactory"]
