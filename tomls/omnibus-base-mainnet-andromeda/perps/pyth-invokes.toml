[setting.perpsPythMarketId]

[setting.perpsPythSkewScale]

[setting.perpsPythMaxFundingVelocity]

[setting.perpsPythMakerFeeRatio]

[setting.perpsPythTakerFeeRatio]

[setting.perpsPythMaxMarketSize]

[setting.perpsPythInitialMarginRatio]

[setting.perpsPythMaintenanceMarginFraction]

[setting.perpsPythFlagRewardRatioD18]

[setting.perpsPythMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsPythMaxSecondsInLiquidationWindow]

[setting.perpsPythMaxLiquidationPd]

[setting.perpsPythEndorsedLiquidator]

[setting.perpsPythMinimumPositionMargin]

[setting.perpsPythLockedOiRatio]

[invoke.createPythPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsPythMarketId %>", "Pyth Network", "PYTH"]

[invoke.setPerpsPricePyth]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= extras.pyth_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createPythPerpsMarket"]

# Do not modify this step. Edit [invoke.setPerpsPythSettlementStrategy] instead.
[invoke.addPerpsPythSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsPythMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
extra.pyth_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.pyth_pyth_settlement_strategy.arg = 2
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= extras.pyth_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                         # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythPythFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
depends = [
    'provision.perpsFactory',
    'setting.perpsPythMarketId',
    'invoke.addPerpsPythSettlementStrategy',
    'provision.pyth_erc7412_wrapper',
    'setting.bigCapSettlementDelay',
    'setting.bigCapSettlementWindowDuration',
    'setting.pythPythFeedId',
    'setting.settlementReward',
    'setting.commitmentPriceDelay',
]
[invoke.setPerpsPythFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= parseEther(settings.perpsPythSkewScale) %>",
    "<%= parseEther(settings.perpsPythMaxFundingVelocity) %>",
]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= parseEther(settings.perpsPythMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsPythTakerFeeRatio) %>",
]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsPythMarketId %>", "<%= parseEther(settings.perpsPythMaxMarketSize) %>"]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythMaxMarketValue]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketValue"
args = ["<%= settings.perpsPythMarketId %>", "<%= parseEther(settings.perpsPythMaxMarketValue) %>"]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= parseEther(settings.perpsPythMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsPythMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsPythMaxLiquidationPd) %>",
    "<%= settings.perpsPythEndorsedLiquidator %>",
]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsPythMarketId %>",
    "<%= parseEther(settings.perpsPythInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPythMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPythMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsPythFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsPythMinimumPositionMargin) %>",
]
depends = ["invoke.createPythPerpsMarket"]

[invoke.setPerpsPythLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsPythMarketId %>", "<%= parseEther(settings.perpsPythLockedOiRatio) %>"]
depends = ["invoke.createPythPerpsMarket"]
