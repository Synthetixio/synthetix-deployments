include = [
    "../perps-factory.toml",
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-op.toml",
    "../common/bigcap-settings.toml",
]

[setting.opPerpsMarketId]

[setting.perpsOpSkewScale]

[setting.perpsOpMaxFundingVelocity]

[setting.perpsOpMakerFeeRatio]

[setting.perpsOpTakerFeeRatio]

[setting.perpsOpMaxMarketSize]

[setting.perpsOpInitialMarginRatio]

[setting.perpsOpMaintenanceMarginFraction]

[setting.perpsOpLiquidationRewardRatioD18]

[setting.perpsOpMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsOpMaxSecondsInLiquidationWindow]

[setting.perpsOpMinimumPositionMargin]

[setting.perpsOpLockedOiRatio]

[setting.pythOpFeedId]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createOpPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.opPerpsMarketId %>", "Optimism Token", "OP"]

[invoke.setPerpsPriceOp]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = ["<%= settings.opPerpsMarketId %>", "<%= extras.op_oracle_id %>"]

[invoke.setPerpsOpSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.opPerpsMarketId %>",
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceWindowDuration = "<%= settings.bigCapPriceWindowDuration %>", priceVerificationContract = "<%= settings.pythPriceVerificationAddress %>", feedId = "<%= settings.pythOpFeedId %>", url = "<%= settings.pythFeedUrl %>", settlementReward = "<%= settings.settlementReward %>", priceDeviationTolerance = "<%= parseEther('1') %>", disabled = false }
]

[invoke.setPerpsOpFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpSkewScale) %>",
    "<%= parseEther(settings.perpsOpMaxFundingVelocity) %>"
]

[invoke.setPerpsOpOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsOpTakerFeeRatio) %>"
]

[invoke.setPerpsOpMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.opPerpsMarketId %>", "<%= parseEther(settings.perpsOpMaxMarketSize) %>"]

[invoke.setPerpsOpMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsOpMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsOpMaxLiquidationPd) %>",
    "<%= settings.perpsBtcEndorsedLiquidator %>"
]

[invoke.setPerpsOpLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsOpMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsOpMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsOpLiquidationRewardRatioD18) %>",
    "<%= parseEther(settings.perpsOpMinimumPositionMargin) %>"
]

[invoke.setPerpsOpLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.opPerpsMarketId %>", "<%= parseEther(settings.perpsOpLockedOiRatio) %>"]

[invoke.setMaxCollateralAmountOp]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxCollateralAmount"
args = ["<%= extras.synth_op_market_id %>", "<%= settings.perpsOpSynthMaxCollateralAmount %>"]
