include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-op.toml",
    "../common/bigcap-settings.toml",
]

[setting.opPerpsMarketId]

[setting.perpsOpSkewScale]

[setting.perpsOpMaxFundingVelocity]

[setting.perpsOpMakerFeeRatio]

[setting.perpsOpTakerFeeRatio]

[setting.perpsOpMaxMarketSize]

[setting.perpsOpInitialMarginRatio]

[setting.perpsOpMaintenanceMarginFraction]

[setting.perpsOpFlagRewardRatioD18]

[setting.perpsOpMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsOpMaxSecondsInLiquidationWindow]

[setting.perpsOpMinimumPositionMargin]

[setting.perpsOpLockedOiRatio]

[setting.pythOpFeedId]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createOpPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.opPerpsMarketId %>", "Optimism Token", "OP"]
depends = ["provision.perpsFactory"]

[invoke.setPerpsPriceOp]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= extras.op_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createOpPerpsMarket", "invoke.registerOpOracleNode"]

# Do not modify this step. Edit [invoke.setPerpsOpSettlementStrategy] instead.
[invoke.addPerpsOpSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.opPerpsMarketId %>",
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythOpFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
extra.op_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.op_pyth_settlement_strategy.arg = 2
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= extras.op_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                                                    # Settlement Strategy ID
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythOpFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
depends = ["invoke.addPerpsOpSettlementStrategy"]

[invoke.setPerpsOpFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpSkewScale) %>",
    "<%= parseEther(settings.perpsOpMaxFundingVelocity) %>",
]
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsOpTakerFeeRatio) %>",
]
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.opPerpsMarketId %>", "<%= parseEther(settings.perpsOpMaxMarketSize) %>"]
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsOpMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsOpMaxLiquidationPd) %>",
    "<%= settings.perpsOpEndorsedLiquidator %>",
]
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.opPerpsMarketId %>",
    "<%= parseEther(settings.perpsOpInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsOpMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsOpMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsOpFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsOpMinimumPositionMargin) %>",
]
depends = ["invoke.createOpPerpsMarket"]

[invoke.setPerpsOpLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.opPerpsMarketId %>", "<%= parseEther(settings.perpsOpLockedOiRatio) %>"]
depends = ["invoke.createOpPerpsMarket"]
