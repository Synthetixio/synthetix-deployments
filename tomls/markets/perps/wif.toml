include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-wif.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsWifMarketId]

[setting.perpsWifSkewScale]

[setting.perpsWifMaxFundingVelocity]

[setting.perpsWifMakerFeeRatio]

[setting.perpsWifTakerFeeRatio]

[setting.perpsWifMaxMarketSize]

[setting.perpsWifInitialMarginRatio]

[setting.perpsWifMaintenanceMarginFraction]

[setting.perpsWifFlagRewardRatioD18]

[setting.perpsWifMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsWifMaxSecondsInLiquidationWindow]

[setting.perpsWifMaxLiquidationPd]

[setting.perpsWifEndorsedLiquidator]

[setting.perpsWifMinimumPositionMargin]

[setting.perpsWifLockedOiRatio]

[invoke.createWifPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsWifMarketId %>", "Wif", "WIF"]

[invoke.setPerpsPriceWif]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsWifMarketId %>",
    "<%= extras.wif_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsWifSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsWifMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythWifFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsWifFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsWifMarketId %>",
    "<%= parseEther(settings.perpsWifSkewScale) %>",
    "<%= parseEther(settings.perpsWifMaxFundingVelocity) %>",
]

[invoke.setPerpsWifOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsWifMarketId %>",
    "<%= parseEther(settings.perpsWifMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsWifTakerFeeRatio) %>",
]

[invoke.setPerpsWifMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsWifMarketId %>", "<%= parseEther(settings.perpsWifMaxMarketSize) %>"]

[invoke.setPerpsWifMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsWifMarketId %>",
    "<%= parseEther(settings.perpsWifMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsWifMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsWifMaxLiquidationPd) %>",
    "<%= settings.perpsWifEndorsedLiquidator %>",
]

[invoke.setPerpsWifLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsWifMarketId %>",
    "<%= parseEther(settings.perpsWifInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsWifMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsWifMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsWifFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsWifMinimumPositionMargin) %>",
]

[invoke.setPerpsWifLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsWifMarketId %>", "<%= parseEther(settings.perpsWifLockedOiRatio) %>"]
