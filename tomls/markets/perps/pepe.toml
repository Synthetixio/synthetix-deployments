include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-pepe.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsPepeMarketId]

[setting.perpsPepeSkewScale]

[setting.perpsPepeMaxFundingVelocity]

[setting.perpsPepeMakerFeeRatio]

[setting.perpsPepeTakerFeeRatio]

[setting.perpsPepeMaxMarketSize]

[setting.perpsPepeInitialMarginRatio]

[setting.perpsPepeMaintenanceMarginFraction]

[setting.perpsPepeFlagRewardRatioD18]

[setting.perpsPepeMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsPepeMaxSecondsInLiquidationWindow]

[setting.perpsPepeMaxLiquidationPd]

[setting.perpsPepeEndorsedLiquidator]

[setting.perpsPepeMinimumPositionMargin]

[setting.perpsPepeLockedOiRatio]

[invoke.createPepePerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsPepeMarketId %>", "Pepe", "PEPE"]

[invoke.setPerpsPricePepe]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "<%= extras.pepe_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsPepeSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythPepeFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsPepeFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "<%= parseEther(settings.perpsPepeSkewScale) %>",
    "<%= parseEther(settings.perpsPepeMaxFundingVelocity) %>",
]

[invoke.setPerpsPepeOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "<%= parseEther(settings.perpsPepeMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsPepeTakerFeeRatio) %>",
]

[invoke.setPerpsPepeMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsPepeMarketId %>", "<%= parseEther(settings.perpsPepeMaxMarketSize) %>"]

[invoke.setPerpsPepeMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "<%= parseEther(settings.perpsPepeMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsPepeMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsPepeMaxLiquidationPd) %>",
    "<%= settings.perpsPepeEndorsedLiquidator %>",
]

[invoke.setPerpsPepeLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsPepeMarketId %>",
    "<%= parseEther(settings.perpsPepeInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPepeMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPepeMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsPepeFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsPepeMinimumPositionMargin) %>",
]

[invoke.setPerpsPepeLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsPepeMarketId %>", "<%= parseEther(settings.perpsPepeLockedOiRatio) %>"]
