include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-ftm.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsFtmMarketId]

[setting.perpsFtmSkewScale]

[setting.perpsFtmMaxFundingVelocity]

[setting.perpsFtmMakerFeeRatio]

[setting.perpsFtmTakerFeeRatio]

[setting.perpsFtmMaxMarketSize]

[setting.perpsFtmInitialMarginRatio]

[setting.perpsFtmMaintenanceMarginFraction]

[setting.perpsFtmFlagRewardRatioD18]

[setting.perpsFtmMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsFtmMaxSecondsInLiquidationWindow]

[setting.perpsFtmMaxLiquidationPd]

[setting.perpsFtmEndorsedLiquidator]

[setting.perpsFtmMinimumPositionMargin]

[setting.perpsFtmLockedOiRatio]

[invoke.createFtmPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsFtmMarketId %>", "Fantom", "FTM"]

[invoke.setPerpsPriceFtm]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "<%= extras.ftm_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsFtmSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythFtmFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsFtmFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "<%= parseEther(settings.perpsFtmSkewScale) %>",
    "<%= parseEther(settings.perpsFtmMaxFundingVelocity) %>",
]

[invoke.setPerpsFtmOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "<%= parseEther(settings.perpsFtmMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsFtmTakerFeeRatio) %>",
]

[invoke.setPerpsFtmMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsFtmMarketId %>", "<%= parseEther(settings.perpsFtmMaxMarketSize) %>"]

[invoke.setPerpsFtmMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "<%= parseEther(settings.perpsFtmMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsFtmMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsFtmMaxLiquidationPd) %>",
    "<%= settings.perpsFtmEndorsedLiquidator %>",
]

[invoke.setPerpsFtmLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsFtmMarketId %>",
    "<%= parseEther(settings.perpsFtmInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsFtmMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsFtmMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsFtmFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsFtmMinimumPositionMargin) %>",
]

[invoke.setPerpsFtmLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsFtmMarketId %>", "<%= parseEther(settings.perpsFtmLockedOiRatio) %>"]
