include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-doge.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsDogeMarketId]

[setting.perpsDogeSkewScale]

[setting.perpsDogeMaxFundingVelocity]

[setting.perpsDogeMakerFeeRatio]

[setting.perpsDogeTakerFeeRatio]

[setting.perpsDogeMaxMarketSize]

[setting.perpsDogeInitialMarginRatio]

[setting.perpsDogeMaintenanceMarginFraction]

[setting.perpsDogeFlagRewardRatioD18]

[setting.perpsDogeMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsDogeMaxSecondsInLiquidationWindow]

[setting.perpsDogeMaxLiquidationPd]

[setting.perpsDogeEndorsedLiquidator]

[setting.perpsDogeMinimumPositionMargin]

[setting.perpsDogeLockedOiRatio]

[invoke.createDogePerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsDogeMarketId %>", "Dogecoin", "DOGE"]

[invoke.setPerpsPriceDoge]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "<%= extras.doge_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsDogeSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythDogeFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsDogeFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "<%= parseEther(settings.perpsDogeSkewScale) %>",
    "<%= parseEther(settings.perpsDogeMaxFundingVelocity) %>",
]

[invoke.setPerpsDogeOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "<%= parseEther(settings.perpsDogeMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsDogeTakerFeeRatio) %>",
]

[invoke.setPerpsDogeMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsDogeMarketId %>", "<%= parseEther(settings.perpsDogeMaxMarketSize) %>"]

[invoke.setPerpsDogeMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "<%= parseEther(settings.perpsDogeMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsDogeMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsDogeMaxLiquidationPd) %>",
    "<%= settings.perpsDogeEndorsedLiquidator %>",
]

[invoke.setPerpsDogeLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsDogeMarketId %>",
    "<%= parseEther(settings.perpsDogeInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsDogeMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsDogeMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsDogeFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsDogeMinimumPositionMargin) %>",
]

[invoke.setPerpsDogeLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsDogeMarketId %>", "<%= parseEther(settings.perpsDogeLockedOiRatio) %>"]
