include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-ltc.toml",
    "../common/bigcap-settings.toml",
]

[setting.ltcPerpsMarketId]

[setting.perpsLtcSkewScale]

[setting.perpsLtcMaxFundingVelocity]

[setting.perpsLtcMakerFeeRatio]

[setting.perpsLtcTakerFeeRatio]

[setting.perpsLtcMaxMarketSize]

[setting.perpsLtcInitialMarginRatio]

[setting.perpsLtcMaintenanceMarginFraction]

[setting.perpsLtcFlagRewardRatioD18]

[setting.perpsLtcMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsLtcMaxSecondsInLiquidationWindow]

[setting.perpsLtcMinimumPositionMargin]

[setting.perpsLtcLockedOiRatio]

[setting.pythLtcFeedId]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createLtcPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.ltcPerpsMarketId %>", "Litecoin", "LTC"]
depends = ["provision.perpsFactory"]

[invoke.setPerpsPriceLtc]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= extras.ltc_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>"
]
depends = ["invoke.createLtcPerpsMarket", "invoke.registerLtcOracleNode"]

# Do not modify this step. Edit [invoke.setPerpsLtcSettlementStrategy] instead.
[invoke.addPerpsLtcSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythLtcFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false }
]
extra.ltc_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.ltc_pyth_settlement_strategy.arg = 2
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= extras.ltc_pyth_settlement_strategy %>", # Settlement Strategy ID
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythLtcFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false }
]
depends = ["invoke.addPerpsLtcSettlementStrategy"]

[invoke.setPerpsLtcFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= parseEther(settings.perpsLtcSkewScale) %>",
    "<%= parseEther(settings.perpsLtcMaxFundingVelocity) %>"
]
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= parseEther(settings.perpsLtcMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsLtcTakerFeeRatio) %>"
]
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.ltcPerpsMarketId %>", "<%= parseEther(settings.perpsLtcMaxMarketSize) %>"]
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= parseEther(settings.perpsLtcMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsLtcMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsLtcMaxLiquidationPd) %>",
    "<%= settings.perpsLtcEndorsedLiquidator %>"
]
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.ltcPerpsMarketId %>",
    "<%= parseEther(settings.perpsLtcInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsLtcMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsLtcMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsLtcFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsLtcMinimumPositionMargin) %>"
]
depends = ["invoke.createLtcPerpsMarket"]

[invoke.setPerpsLtcLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.ltcPerpsMarketId %>", "<%= parseEther(settings.perpsLtcLockedOiRatio) %>"]
depends = ["invoke.createLtcPerpsMarket"]
