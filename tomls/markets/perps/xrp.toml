include = [
    "../perps-factory.toml",
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-xrp.toml",
    "../common/bigcap-settings.toml",
]

[setting.xrpPerpsMarketId]

[setting.perpsXrpSkewScale]

[setting.perpsXrpMaxFundingVelocity]

[setting.perpsXrpMakerFeeRatio]

[setting.perpsXrpTakerFeeRatio]

[setting.perpsXrpMaxMarketSize]

[setting.perpsXrpInitialMarginRatio]

[setting.perpsXrpMaintenanceMarginFraction]

[setting.perpsXrpLiquidationRewardRatioD18]

[setting.perpsXrpMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsXrpMaxSecondsInLiquidationWindow]

[setting.perpsXrpMinimumPositionMargin]

[setting.perpsXrpLockedOiRatio]

[setting.pythXrpFeedId]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createXrpPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.xrpPerpsMarketId %>", "Ripple Token", "XRP"]
depends = ["provision.perpsFactory"]

[invoke.setPerpsPriceXrp]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = ["<%= settings.xrpPerpsMarketId %>", "<%= extras.xrp_oracle_id %>"]
depends = ["invoke.createXrpPerpsMarket", "invoke.registerXrpOracleNode"]

[invoke.setPerpsXrpSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.xrpPerpsMarketId %>",
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceWindowDuration = "<%= settings.bigCapPriceWindowDuration %>", priceVerificationContract = "<%= settings.pythPriceVerificationAddress %>", feedId = "<%= settings.pythXrpFeedId %>", url = "<%= settings.pythFeedUrl %>", settlementReward = "<%= settings.settlementReward %>", priceDeviationTolerance = "<%= parseEther('1') %>", disabled = false }
]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsXrpFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.xrpPerpsMarketId %>",
    "<%= parseEther(settings.perpsXrpSkewScale) %>",
    "<%= parseEther(settings.perpsXrpMaxFundingVelocity) %>"
]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsXrpOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.xrpPerpsMarketId %>",
    "<%= parseEther(settings.perpsXrpMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsXrpTakerFeeRatio) %>"
]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsXrpMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.xrpPerpsMarketId %>", "<%= parseEther(settings.perpsXrpMaxMarketSize) %>"]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsXrpMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.xrpPerpsMarketId %>",
    "<%= parseEther(settings.perpsXrpMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsXrpMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsXrpMaxLiquidationPd) %>",
    "<%= settings.perpsXrpEndorsedLiquidator %>"
]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsXrpLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.xrpPerpsMarketId %>",
    "<%= parseEther(settings.perpsXrpInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsXrpMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsXrpMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsXrpLiquidationRewardRatioD18) %>",
    "<%= parseEther(settings.perpsXrpMinimumPositionMargin) %>"
]
depends = ["invoke.createXrpPerpsMarket"]

[invoke.setPerpsOpLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.xrpPerpsMarketId %>", "<%= parseEther(settings.perpsXrpLockedOiRatio) %>"]
depends = ["invoke.createXrpPerpsMarket"]
