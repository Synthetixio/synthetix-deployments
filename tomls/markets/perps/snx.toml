include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-snx.toml",
    "../common/bigcap-settings.toml",
]

[setting.snxPerpsMarketId]

[setting.perpsSnxSkewScale]

[setting.perpsSnxMaxFundingVelocity]

[setting.perpsSnxMakerFeeRatio]

[setting.perpsSnxTakerFeeRatio]

[setting.perpsSnxMaxMarketSize]

[setting.perpsSnxInitialMarginRatio]

[setting.perpsSnxMaintenanceMarginFraction]

[setting.perpsSnxFlagRewardRatioD18]

[setting.perpsSnxMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsSnxMaxSecondsInLiquidationWindow]

[setting.perpsSnxMinimumPositionMargin]

[setting.perpsSnxLockedOiRatio]

[setting.pythSnxFeedId]

# strategy type for Perps markets is 0, for spot markets is 1
[setting.strategyType]
defaultValue = "0"

[invoke.createSnxPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.snxPerpsMarketId %>", "Synthetix Network Token", "SNX"]
depends = ["provision.perpsFactory"]

[invoke.setPerpsPriceSnx]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= extras.snx_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createSnxPerpsMarket", "invoke.registerSnxOracleNode"]

# Do not modify this step. Edit [invoke.setPerpsSnxSettlementStrategy] instead.
[invoke.addPerpsSnxSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.snxPerpsMarketId %>",
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythSnxFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
extra.snx_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.snx_pyth_settlement_strategy.arg = 2
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= extras.xrp_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                                                    # Settlement Strategy ID
    { strategyType = "<%= settings.strategyType %>", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythSnxFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
depends = ["invoke.addPerpsSnxSettlementStrategy"]

[invoke.setPerpsSnxFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= parseEther(settings.perpsSnxSkewScale) %>",
    "<%= parseEther(settings.perpsSnxMaxFundingVelocity) %>",
]
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= parseEther(settings.perpsSnxMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsSnxTakerFeeRatio) %>",
]
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.snxPerpsMarketId %>", "<%= parseEther(settings.perpsSnxMaxMarketSize) %>"]
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= parseEther(settings.perpsSnxMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsSnxMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsSnxMaxLiquidationPd) %>",
    "<%= settings.perpsSnxEndorsedLiquidator %>",
]
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.snxPerpsMarketId %>",
    "<%= parseEther(settings.perpsSnxInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsSnxMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsSnxMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsSnxFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsSnxMinimumPositionMargin) %>",
]
depends = ["invoke.createSnxPerpsMarket"]

[invoke.setPerpsSnxLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.snxPerpsMarketId %>", "<%= parseEther(settings.perpsSnxLockedOiRatio) %>"]
depends = ["invoke.createSnxPerpsMarket"]
