include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-arb.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsArbMarketId]

[setting.perpsArbSkewScale]

[setting.perpsArbMaxFundingVelocity]

[setting.perpsArbMakerFeeRatio]

[setting.perpsArbTakerFeeRatio]

[setting.perpsArbMaxMarketSize]

[setting.perpsArbInitialMarginRatio]

[setting.perpsArbMaintenanceMarginFraction]

[setting.perpsArbFlagRewardRatioD18]

[setting.perpsArbMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsArbMaxSecondsInLiquidationWindow]

[setting.perpsArbMaxLiquidationPd]

[setting.perpsArbEndorsedLiquidator]

[setting.perpsArbMinimumPositionMargin]

[setting.perpsArbLockedOiRatio]

[invoke.createArbPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsArbMarketId %>", "Arbitrum", "ARB"]

[invoke.setPerpsPriceArb]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsArbMarketId %>",
    "<%= extras.arb_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsArbSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsArbMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythArbFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsArbFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsArbMarketId %>",
    "<%= parseEther(settings.perpsArbSkewScale) %>",
    "<%= parseEther(settings.perpsArbMaxFundingVelocity) %>",
]

[invoke.setPerpsArbOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsArbMarketId %>",
    "<%= parseEther(settings.perpsArbMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsArbTakerFeeRatio) %>",
]

[invoke.setPerpsArbMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsArbMarketId %>", "<%= parseEther(settings.perpsArbMaxMarketSize) %>"]

[invoke.setPerpsArbMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsArbMarketId %>",
    "<%= parseEther(settings.perpsArbMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsArbMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsArbMaxLiquidationPd) %>",
    "<%= settings.perpsArbEndorsedLiquidator %>",
]

[invoke.setPerpsArbLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsArbMarketId %>",
    "<%= parseEther(settings.perpsArbInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsArbMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsArbMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsArbFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsArbMinimumPositionMargin) %>",
]

[invoke.setPerpsArbLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsArbMarketId %>", "<%= parseEther(settings.perpsArbLockedOiRatio) %>"]
