include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-bnb.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsBnbMarketId]

[setting.perpsBnbSkewScale]

[setting.perpsBnbMaxFundingVelocity]

[setting.perpsBnbMakerFeeRatio]

[setting.perpsBnbTakerFeeRatio]

[setting.perpsBnbMaxMarketSize]

[setting.perpsBnbInitialMarginRatio]

[setting.perpsBnbMaintenanceMarginFraction]

[setting.perpsBnbFlagRewardRatioD18]

[setting.perpsBnbMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsBnbMaxSecondsInLiquidationWindow]

[setting.perpsBnbMaxLiquidationPd]

[setting.perpsBnbEndorsedLiquidator]

[setting.perpsBnbMinimumPositionMargin]

[setting.perpsBnbLockedOiRatio]

[invoke.createBnbPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsBnbMarketId %>", "BNB", "BNB"]

[invoke.setPerpsPriceBnb]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "<%= extras.bnb_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsBnbSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythBnbFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsBnbFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "<%= parseEther(settings.perpsBnbSkewScale) %>",
    "<%= parseEther(settings.perpsBnbMaxFundingVelocity) %>",
]

[invoke.setPerpsBnbOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "<%= parseEther(settings.perpsBnbMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsBnbTakerFeeRatio) %>",
]

[invoke.setPerpsBnbMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsBnbMarketId %>", "<%= parseEther(settings.perpsBnbMaxMarketSize) %>"]

[invoke.setPerpsBnbMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "<%= parseEther(settings.perpsBnbMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsBnbMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsBnbMaxLiquidationPd) %>",
    "<%= settings.perpsBnbEndorsedLiquidator %>",
]

[invoke.setPerpsBnbLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsBnbMarketId %>",
    "<%= parseEther(settings.perpsBnbInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsBnbMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsBnbMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsBnbFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsBnbMinimumPositionMargin) %>",
]

[invoke.setPerpsBnbLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsBnbMarketId %>", "<%= parseEther(settings.perpsBnbLockedOiRatio) %>"]
