include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-bonk.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsBonkMarketId]

[setting.perpsBonkSkewScale]

[setting.perpsBonkMaxFundingVelocity]

[setting.perpsBonkMakerFeeRatio]

[setting.perpsBonkTakerFeeRatio]

[setting.perpsBonkMaxMarketSize]

[setting.perpsBonkInitialMarginRatio]

[setting.perpsBonkMaintenanceMarginFraction]

[setting.perpsBonkFlagRewardRatioD18]

[setting.perpsBonkMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsBonkMaxSecondsInLiquidationWindow]

[setting.perpsBonkMaxLiquidationPd]

[setting.perpsBonkEndorsedLiquidator]

[setting.perpsBonkMinimumPositionMargin]

[setting.perpsBonkLockedOiRatio]

[invoke.createBonkPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsBonkMarketId %>", "Bonk", "BONK"]

[invoke.setPerpsPriceBonk]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "<%= extras.bonk_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsBonkSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                  # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythBonkFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsBonkFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "<%= parseEther(settings.perpsBonkSkewScale) %>",
    "<%= parseEther(settings.perpsBonkMaxFundingVelocity) %>",
]

[invoke.setPerpsBonkOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "<%= parseEther(settings.perpsBonkMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsBonkTakerFeeRatio) %>",
]

[invoke.setPerpsBonkMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsBonkMarketId %>", "<%= parseEther(settings.perpsBonkMaxMarketSize) %>"]

[invoke.setPerpsBonkMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "<%= parseEther(settings.perpsBonkMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsBonkMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsBonkMaxLiquidationPd) %>",
    "<%= settings.perpsBonkEndorsedLiquidator %>",
]

[invoke.setPerpsBonkLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsBonkMarketId %>",
    "<%= parseEther(settings.perpsBonkInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsBonkMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsBonkMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsBonkFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsBonkMinimumPositionMargin) %>",
]

[invoke.setPerpsBonkLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsBonkMarketId %>", "<%= parseEther(settings.perpsBonkLockedOiRatio) %>"]
