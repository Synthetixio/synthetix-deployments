include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-rune.toml",
    "../common/bigcap-settings.toml",
]

[setting.perpsRuneMarketId]

[setting.perpsRuneSkewScale]

[setting.perpsRuneMaxFundingVelocity]

[setting.perpsRuneMakerFeeRatio]

[setting.perpsRuneTakerFeeRatio]

[setting.perpsRuneMaxMarketSize]

[setting.perpsRuneInitialMarginRatio]

[setting.perpsRuneMaintenanceMarginFraction]

[setting.perpsRuneFlagRewardRatioD18]

[setting.perpsRuneMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsRuneMaxSecondsInLiquidationWindow]

[setting.perpsRuneMaxLiquidationPd]

[setting.perpsRuneEndorsedLiquidator]

[setting.perpsRuneMinimumPositionMargin]

[setting.perpsRuneLockedOiRatio]

[invoke.createRunePerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsRuneMarketId %>", "THORChain", "RUNE"]

[invoke.setPerpsPriceRune]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "<%= extras.rune_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]

[invoke.setPerpsRuneSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "0",                                                                                                                                                                                                                                                                                                                                                                                                                                                                   # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythRuneFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsRuneFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "<%= parseEther(settings.perpsRuneSkewScale) %>",
    "<%= parseEther(settings.perpsRuneMaxFundingVelocity) %>",
]

[invoke.setPerpsRuneOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "<%= parseEther(settings.perpsRuneMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsRuneTakerFeeRatio) %>",
]

[invoke.setPerpsRuneMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsRuneMarketId %>", "<%= parseEther(settings.perpsRuneMaxMarketSize) %>"]

[invoke.setPerpsRuneMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "<%= parseEther(settings.perpsRuneMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsRuneMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsRuneMaxLiquidationPd) %>",
    "<%= settings.perpsRuneEndorsedLiquidator %>",
]

[invoke.setPerpsRuneLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsRuneMarketId %>",
    "<%= parseEther(settings.perpsRuneInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsRuneMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsRuneMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsRuneFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsRuneMinimumPositionMargin) %>",
]

[invoke.setPerpsRuneLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsRuneMarketId %>", "<%= parseEther(settings.perpsRuneLockedOiRatio) %>"]
