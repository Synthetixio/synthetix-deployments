[setting.perpsEtcMarketId]

[setting.perpsEtcSkewScale]

[setting.perpsEtcMaxFundingVelocity]

[setting.perpsEtcMakerFeeRatio]

[setting.perpsEtcTakerFeeRatio]

[setting.perpsEtcMaxMarketSize]

[setting.perpsEtcInitialMarginRatio]

[setting.perpsEtcMaintenanceMarginFraction]

[setting.perpsEtcFlagRewardRatioD18]

[setting.perpsEtcMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsEtcMaxSecondsInLiquidationWindow]

[setting.perpsEtcMaxLiquidationPd]

[setting.perpsEtcEndorsedLiquidator]

[setting.perpsEtcMinimumPositionMargin]

[setting.perpsEtcLockedOiRatio]

[invoke.createEtcPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsEtcMarketId %>", "Ethereum Classic", "ETC"]

[invoke.setPerpsPriceEtc]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= extras.etc_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createEtcPerpsMarket"]

# Do not modify this step. Edit [invoke.setPerpsEtcSettlementStrategy] instead.
[invoke.addPerpsEtcSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsEtcMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
extra.etc_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.etc_pyth_settlement_strategy.arg = 2
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= extras.etc_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                         # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythEtcFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
depends = [
    'provision.perpsFactory',
    'setting.perpsEtcMarketId',
    'invoke.addPerpsEtcSettlementStrategy',
    'provision.pyth_erc7412_wrapper',
    'setting.bigCapSettlementDelay',
    'setting.bigCapSettlementWindowDuration',
    'setting.pythEtcFeedId',
    'setting.settlementReward',
    'setting.commitmentPriceDelay',
]
[invoke.setPerpsEtcFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= parseEther(settings.perpsEtcSkewScale) %>",
    "<%= parseEther(settings.perpsEtcMaxFundingVelocity) %>",
]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= parseEther(settings.perpsEtcMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsEtcTakerFeeRatio) %>",
]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsEtcMarketId %>", "<%= parseEther(settings.perpsEtcMaxMarketSize) %>"]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcMaxMarketValue]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketValue"
args = ["<%= settings.perpsEtcMarketId %>", "<%= parseEther(settings.perpsEtcMaxMarketValue) %>"]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= parseEther(settings.perpsEtcMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsEtcMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsEtcMaxLiquidationPd) %>",
    "<%= settings.perpsEtcEndorsedLiquidator %>",
]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsEtcMarketId %>",
    "<%= parseEther(settings.perpsEtcInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsEtcMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsEtcMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsEtcFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsEtcMinimumPositionMargin) %>",
]
depends = ["invoke.createEtcPerpsMarket"]

[invoke.setPerpsEtcLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsEtcMarketId %>", "<%= parseEther(settings.perpsEtcLockedOiRatio) %>"]
depends = ["invoke.createEtcPerpsMarket"]
