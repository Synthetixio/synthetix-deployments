[setting.perpsPendleMarketId]

[setting.perpsPendleSkewScale]

[setting.perpsPendleMaxFundingVelocity]

[setting.perpsPendleMakerFeeRatio]

[setting.perpsPendleTakerFeeRatio]

[setting.perpsPendleMaxMarketSize]

[setting.perpsPendleInitialMarginRatio]

[setting.perpsPendleMaintenanceMarginFraction]

[setting.perpsPendleFlagRewardRatioD18]

[setting.perpsPendleMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsPendleMaxSecondsInLiquidationWindow]

[setting.perpsPendleMaxLiquidationPd]

[setting.perpsPendleEndorsedLiquidator]

[setting.perpsPendleMinimumPositionMargin]

[setting.perpsPendleLockedOiRatio]

[invoke.createPendlePerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsPendleMarketId %>", "Pendle", "PENDLE"]

[invoke.setPerpsPricePendle]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= extras.pendle_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createPendlePerpsMarket"]

# Do not modify this step. Edit [invoke.setPerpsPendleSettlementStrategy] instead.
[invoke.addPerpsPendleSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsPendleMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
extra.pendle_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.pendle_pyth_settlement_strategy.arg = 2
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= extras.pendle_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                         # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythPendleFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]
depends = [
    'provision.perpsFactory',
    'setting.perpsPendleMarketId',
    'invoke.addPerpsPendleSettlementStrategy',
    'provision.pyth_erc7412_wrapper',
    'setting.bigCapSettlementDelay',
    'setting.bigCapSettlementWindowDuration',
    'setting.pythPendleFeedId',
    'setting.settlementReward',
    'setting.commitmentPriceDelay',
]
[invoke.setPerpsPendleFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleSkewScale) %>",
    "<%= parseEther(settings.perpsPendleMaxFundingVelocity) %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsPendleTakerFeeRatio) %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleMaxMarketSize) %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleMaxMarketValue]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketValue"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleMaxMarketValue) %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsPendleMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsPendleMaxLiquidationPd) %>",
    "<%= settings.perpsPendleEndorsedLiquidator %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPendleMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsPendleMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsPendleFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsPendleMinimumPositionMargin) %>",
]
depends = ["invoke.createPendlePerpsMarket"]

[invoke.setPerpsPendleLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = [
    "<%= settings.perpsPendleMarketId %>",
    "<%= parseEther(settings.perpsPendleLockedOiRatio) %>",
]
depends = ["invoke.createPendlePerpsMarket"]
