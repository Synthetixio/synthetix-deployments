include = [
    # TODO: this is a funny necessary dependency because the oracle manager is registering the same node twice
    # however, it will not emit "NodeRegistered" the second time because its an unnecessary call
    "../../oracles/pyth-avax.toml",
    "../../markets/common/bigcap-settings.toml",
]
# NOTE: This toml will live until the setMaxMarketValue is on mainnet

[setting.perpsAvaxMarketId]

[setting.perpsAvaxSkewScale]

[setting.perpsAvaxMaxFundingVelocity]

[setting.perpsAvaxMakerFeeRatio]

[setting.perpsAvaxTakerFeeRatio]

[setting.perpsAvaxMaxMarketSize]

[setting.perpsAvaxInitialMarginRatio]

[setting.perpsAvaxMaintenanceMarginFraction]

[setting.perpsAvaxFlagRewardRatioD18]

[setting.perpsAvaxMaxLiquidationLimitAccumulationMultiplier]

[setting.perpsAvaxMaxSecondsInLiquidationWindow]

[setting.perpsAvaxMaxLiquidationPd]

[setting.perpsAvaxEndorsedLiquidator]

[setting.perpsAvaxMinimumPositionMargin]

[setting.perpsAvaxLockedOiRatio]

[invoke.createAvaxPerpsMarket]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["<%= settings.perpsAvaxMarketId %>", "Avalanche", "AVAX"]

[invoke.setPerpsPriceAvax]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= extras.avax_oracle_id %>",
    "<%= settings.bigCapStrictStalenessTolerance %>",
]
depends = ["invoke.createAvaxPerpsMarket"]

# Do not modify this step. Edit [invoke.setPerpsAvaxSettlementStrategy] instead.
[invoke.addPerpsAvaxSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    { strategyType = "0", settlementDelay = "0", settlementWindowDuration = "1", priceVerificationContract = "0x0000000000000000000000000000000000000000", feedId = "0x0000000000000000000000000000000000000000000000000000000000000000", settlementReward = "0", disabled = false, commitmentPriceDelay = "0" },
]
extra.avax_pyth_settlement_strategy.event = "SettlementStrategyAdded"
extra.avax_pyth_settlement_strategy.arg = 2
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxSettlementStrategy]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSettlementStrategy"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= extras.avax_pyth_settlement_strategy %>",                                                                                                                                                                                                                                                                                                                                                                                                                         # Settlement Strategy ID
    { strategyType = "0", settlementDelay = "<%= settings.bigCapSettlementDelay %>", settlementWindowDuration = "<%= settings.bigCapSettlementWindowDuration %>", priceVerificationContract = "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>", feedId = "<%= settings.pythAvaxFeedId %>", settlementReward = "<%= parseEther(settings.settlementReward) %>", disabled = false, commitmentPriceDelay = "<%= settings.commitmentPriceDelay %>" },
]

[invoke.setPerpsAvaxFundingParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= parseEther(settings.perpsAvaxSkewScale) %>",
    "<%= parseEther(settings.perpsAvaxMaxFundingVelocity) %>",
]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxOrderFees]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= parseEther(settings.perpsAvaxMakerFeeRatio) %>",
    "<%= parseEther(settings.perpsAvaxTakerFeeRatio) %>",
]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxMaxMarketSize]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = ["<%= settings.perpsAvaxMarketId %>", "<%= parseEther(settings.perpsAvaxMaxMarketSize) %>"]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxMaxMarketValue]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketValue"
args = ["<%= settings.perpsAvaxMarketId %>", "<%= parseEther(settings.perpsAvaxMaxMarketValue) %>"]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxMaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= parseEther(settings.perpsAvaxMaxLiquidationLimitAccumulationMultiplier) %>",
    "<%= settings.perpsAvaxMaxSecondsInLiquidationWindow %>",
    "<%= parseEther(settings.perpsAvaxMaxLiquidationPd) %>",
    "<%= settings.perpsAvaxEndorsedLiquidator %>",
]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxLiquidationParameters]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= settings.perpsAvaxMarketId %>",
    "<%= parseEther(settings.perpsAvaxInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsAvaxMinimumInitialMarginRatio) %>",
    "<%= parseEther(settings.perpsAvaxMaintenanceMarginScalar) %>",
    "<%= parseEther(settings.perpsAvaxFlagRewardRatioD18) %>",
    "<%= parseEther(settings.perpsAvaxMinimumPositionMargin) %>",
]
depends = ["invoke.createAvaxPerpsMarket"]

[invoke.setPerpsAvaxLockedOiRatio]
target = ["perpsFactory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = ["<%= settings.perpsAvaxMarketId %>", "<%= parseEther(settings.perpsAvaxLockedOiRatio) %>"]
depends = ["invoke.createAvaxPerpsMarket"]
