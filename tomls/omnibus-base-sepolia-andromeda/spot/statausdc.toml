# This initializes a sStataUSDC synth per SIP-377 and SCCP-330 for testnet
# It wraps to stataUSDC 1:1 and exchanges to sUSD based on the stataUSDC/USDC ratio (because this deployment is denominated in USDC)
# All exchanges are atomic. The stataUSDC/USDC ratio can be determined via the Erc4626ToAssetsRatioOracle.
# On testnet, we use imports.erc_4626_to_assets_ratio_oracle.contracts.ERC20Mock.address as aUSDC and
# imports.erc_4626_to_assets_ratio_oracle.contracts.ERC4626Mock.address as stataUSDC

[setting.synthStataUsdcMaxMarketCollateral]
defaultValue = "<%= parseEther(String(5_000_000)) %>"

[setting.spotStrictStalenessTolerance]
defaultValue = "60"

[invoke.createStataUsdcSynth]
target = ["spotFactory.SpotMarketProxy"]
fromCall.func = "owner"
func = "createSynth"
args = ["Synthetic Static aUSDC", "sStataUSDC", "<%= settings.owner %>"]
extra.synth_stata_usdc_market_id.event = "SynthRegistered"
extra.synth_stata_usdc_market_id.arg = 0
extra.synth_stata_usdc_token_address.event = "SynthRegistered"
extra.synth_stata_usdc_token_address.arg = 1


[invoke.setSynthPriceStataUsdc]
target = ["spotFactory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_stata_usdc_market_id %>"]
func = "updatePriceData"
args = [
    "<%= extras.synth_stata_usdc_market_id %>",
    "<%= imports.system.extras.const_one_oracle_id %>",
    "<%= imports.system.extras.const_one_oracle_id %>",
    "<%= settings.spotStrictStalenessTolerance %>", # Effectively unused, as this oracle node will never return something stale
]

[invoke.setSynthMaxMarketCollateralStataUsdc]
target = ["system.CoreProxy"]
fromCall.func = "owner"
fromCall.args = []
func = "configureMaximumMarketCollateral"
args = [
    "<%= extras.synth_stata_usdc_market_id %>",
    "<%= imports.erc_4626_to_assets_ratio_oracle.contracts.ERC4626Mock.address %>",
    "<%= settings.synthStataUsdcMaxMarketCollateral %>",
]

[invoke.configureSynthWrapperStataUsdc]
target = ["spotFactory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_stata_usdc_market_id %>"]
func = "setWrapper"
args = [
    "<%= extras.synth_stata_usdc_market_id %>",
    "<%= imports.erc_4626_to_assets_ratio_oracle.contracts.ERC4626Mock.address %>",
    "<%= settings.synthStataUsdcMaxMarketCollateral %>",
]

[invoke.configure_stata_usdc_collateral]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "configureCollateral"  # "args" see below in the multiline block

# We allow stataUSDC as collateral with depositingEnabled = false so the spot market can deposit it, but it can't be LPed
# Users deposit/delegate sStataUSDC
[[invoke.configure_stata_usdc_collateral.args]]
tokenAddress = "<%= imports.erc_4626_to_assets_ratio_oracle.contracts.ERC4626Mock.address %>" 
oracleNodeId = "<%= imports.system.extras.erc_4626_to_assets_ratio_oracle_id %>"
issuanceRatioD18 = "<%= MaxUint256 %>"
liquidationRatioD18 = "<%= parseEther('1.1') %>"
liquidationRewardD18 = "<%= parseEther('0.005') %>"
minDelegationD18 = "<%= parseEther('100') %>"
depositingEnabled = false