version: 2.1

parameters:
  node-version:
    type: string
    default: "18.18.0"

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable

  install-anvil:
    steps:
      - restore_cache:
          keys:
            - foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}

      - run:
          name: "Install Foundry"
          working_directory: ~/
          environment:
            SHELL: /bin/bash
          command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV

            if command -v anvil; then
              echo "Anvil already installed"
              anvil --version
            else
              curl -L https://foundry.paradigm.xyz | bash
              foundryup
            fi

      - save_cache:
          key: foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}
          paths:
            - "~/.foundry"

  run-anvil:
    parameters:
      provider-url:
        type: string
      port:
        type: integer
        default: 8545
    steps:
      - run:
          name: Run anvil on 127.0.0.1:<< parameters.port >>
          command: |
            anvil \
              --port << parameters.port >> \
              --fork-url << parameters.provider-url >>
          background: true

  wait-for-anvil:
    parameters:
      port:
        type: integer
        default: 8545
    steps:
      - run:
          name: Wait for anvil ready on 127.0.0.1:<< parameters.port >>
          command: wget -q -O - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data='{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}' --header='Content-Type:application/json' http://127.0.0.1:<< parameters.port >>

  install-ipfs:
    steps:
      - restore_cache:
          keys:
            - ipfs-{{ .Environment.IPFS_CACHE_VERSION }}

      - run:
          name: "Install IPFS"
          working_directory: ~/
          command: |
            export PATH="$PATH:$HOME/go-ipfs"
            echo 'export PATH=$PATH:$HOME/go-ipfs' >> $BASH_ENV

            if command -v ipfs; then
              echo "IPFS already installed"
              ipfs version
              ipfs id
            else
              LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
              LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
              DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
              echo "DOWNLOAD_URL=$DOWNLOAD_URL"
              curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
              tar -xzf ipfs.tar.gz
              rm -rf ~/.ipfs
              ipfs init
            fi

      - save_cache:
          key: ipfs-{{ .Environment.IPFS_CACHE_VERSION }}
          paths:
            - "~/go-ipfs"
            - "~/.ipfs"

  run-ipfs:
    steps:
      - run:
          command: ipfs daemon
          background: true

  wait-for-ipfs:
    steps:
      - run:
          name: "Wait for IPFS daemon to start"
          command: wget --output-document - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

jobs:
  lint:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn dedupe --check
      - run: yarn pretty:check

  fork-test:
    parameters:
      toml:
        type: string
      chain-id:
        type: integer
      provider-url:
        type: string
      upgrade-from:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    # environment:
    #   - CANNON_IPFS_URL: "http://127.0.0.1:5001"
    steps:
      - checkout
      - install-anvil
      #- run-anvil:
      #    provider-url: << parameters.provider-url >>
      #- install-ipfs
      #- run-ipfs
      - yarn-install
      #- wait-for-anvil
      # - wait-for-ipfs

      - run:
          name: "Build new package upgrading from << parameters.upgrade-from >> and keep RPC running"
          background: true
          command: |
            yarn cannon build << parameters.toml >> \
              --keep-alive \
              --port 8545 \
              --dry-run \
              --upgrade-from << parameters.upgrade-from >> \
              --chain-id << parameters.chain-id >> \
              --provider-url << parameters.provider-url >> \
                | tee ./cannon-build.log

      - run:
          name: "Wait for anvil to start and export RPC_URL"
          command: |
            touch ./cannon-build.log

            # First, check if the log file already has the information
            RPC_URL=$(awk -F'at ' '/Built package RPC URL available at/ {print $2; exit}' ./cannon-build.log)
            export RPC_URL

            # If the information wasn't found, start tailing the log
            if [[ -z $RPC_URL ]]; then
                while IFS= read -r line
                do
                    if [[ $line == *"Built package RPC URL available at"* ]]; then
                        RPC_URL=$(echo "$line" | awk -F'at ' '{print $2}')
                        echo "export RPC_URL=$RPC_URL" >> $BASH_ENV
                        source $BASH_ENV
                        break
                    fi
                done < <(tail -f -n0 ./cannon-build.log)            
            fi

      - run: grep 'ðŸ’¥' ./cannon-build.log

      - run:
          name: "Check for Proxies redeployment"
          environment:
            - PROXIES: "contract.InitialCoreProxy contract.InitialProxy contract.InitialSpotMarketProxy"
          command: |
            for PROXY in $PROXIES; do
              echo "grep -c "Executing [$PROXY]" ./cannon-build.log" 
              if [ $(grep -c "Executing [$PROXY]" ./cannon-build.log) -gt 0 ]; then
                echo "Proxy $PROXY was modified"
                exit 1
              fi
            done

      - run:
          name: "Generate deployments"
          command: node e2e/fetch-deployments.js ./cannon-build.log

      - store_artifacts:
          path: "./e2e/deployments"

      - run:
          name: "Run tests"
          environment:
            - DEBUG: "e2e:*"
          command: |
            TEST_FILES=$(circleci tests glob 'e2e/tests/<< parameters.toml >>/*.e2e.js')
            echo "$TEST_FILES" | circleci tests run --verbose --split-by=timings --command="xargs yarn mocha --exit"

workflows:
  version: 2.1

  tests:
    jobs:
      - lint

      - fork-test:
          name: base-goerli-andromeda
          toml: omnibus-base-goerli-andromeda.toml
          upgrade-from: "synthetix-omnibus:latest@andromeda"
          chain-id: 84531
          provider-url: https://goerli.base.org

      - fork-test:
          name: base-mainnet-andromeda
          toml: omnibus-base-mainnet-andromeda.toml
          upgrade-from: "synthetix-omnibus:latest@andromeda"
          chain-id: 8453
          provider-url: https://mainnet.base.org

      - fork-test:
          name: base-goerli
          toml: omnibus-base-goerli.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 84531
          provider-url: https://goerli.base.org

      - fork-test:
          name: goerli
          toml: omnibus-goerli.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 5
          provider-url: https://goerli.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: mainnet
          toml: omnibus-mainnet.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 1
          provider-url: https://mainnet.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: optimism-mainnet
          toml: omnibus-optimism-mainnet.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 10
          provider-url: https://optimism-mainnet.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: sepolia
          toml: omnibus-sepolia.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 11155111
          provider-url: https://sepolia.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: polygon-mumbai
          toml: omnibus-polygon-mumbai.toml
          upgrade-from: "synthetix-omnibus:latest@main"
          chain-id: 80001
          provider-url: https://polygon-mumbai.infura.io/v3/$INFURA_API_KEY
