version: 2.1

parameters:
  node-version:
    type: string
    default: "18.18.0"

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable

  install-anvil:
    steps:
      - restore_cache:
          keys:
            - foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}

      - run:
          name: "Install Foundry"
          working_directory: ~/
          environment:
            SHELL: /bin/bash
          command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV

            if command -v anvil; then
              echo "Anvil already installed"
              anvil --version
            else
              curl -L https://foundry.paradigm.xyz | bash
              foundryup
            fi

      - save_cache:
          key: foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}
          paths:
            - "~/.foundry"

  run-anvil:
    parameters:
      provider-url:
        type: string
      port:
        type: integer
        default: 8545
    steps:
      - run:
          name: Run anvil on 127.0.0.1:<< parameters.port >>
          command: |
            anvil \
              --port << parameters.port >> \
              --fork-url << parameters.provider-url >>
          background: true

  wait-for-anvil:
    parameters:
      port:
        type: integer
        default: 8545
    steps:
      - run:
          name: Wait for anvil ready on 127.0.0.1:<< parameters.port >>
          command: wget -q -O - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data='{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}' --header='Content-Type:application/json' http://127.0.0.1:<< parameters.port >>

  install-ipfs:
    steps:
      - restore_cache:
          keys:
            - ipfs-{{ .Environment.IPFS_CACHE_VERSION }}

      - run:
          name: "Install IPFS"
          working_directory: ~/
          command: |
            export PATH="$PATH:$HOME/go-ipfs"
            echo 'export PATH=$PATH:$HOME/go-ipfs' >> $BASH_ENV

            if command -v ipfs; then
              echo "IPFS already installed"
              ipfs version
              ipfs id
            else
              LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
              LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
              DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
              echo "DOWNLOAD_URL=$DOWNLOAD_URL"
              curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
              tar -xzf ipfs.tar.gz
              rm -rf ~/.ipfs
              ipfs init
            fi

      - save_cache:
          key: ipfs-{{ .Environment.IPFS_CACHE_VERSION }}
          paths:
            - "~/go-ipfs"
            - "~/.ipfs"

  run-ipfs:
    steps:
      - run:
          command: ipfs daemon
          background: true

  wait-for-ipfs:
    steps:
      - run:
          name: "Wait for IPFS daemon to start"
          command: wget --output-document - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

  github-pr:
    parameters:
      working_directory:
        type: string
      repo_slug:
        type: string
      branch_head:
        type: string
      branch_base:
        type: string
      commit_message:
        type: string
    steps:
      - run:
          working_directory: << parameters.working_directory >>
          name: "Push to '<< parameters.branch_head >>' branch in '<< parameters.repo_slug >>' and open a PR"
          command: |
            STATUS=$(git status)
            if [[ $STATUS == *"nothing to commit, working tree clean"* ]]; then
              echo "SKIP. Working tree is clean. No changes"
              exit 0
            fi

            git branch "<< parameters.branch_head >>"
            git checkout "<< parameters.branch_head >>"

            git config --global user.email engineering@snxdao.io
            git config --global user.name synthetix-team

            git add .
            git commit -m "<< parameters.commit_message >>"
            git push --set-upstream --force origin "<< parameters.branch_head >>"

            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/<< parameters.repo_slug >>/pulls?state=open | tee /tmp/opened-pulls.txt

            PR_URL=$(cat /tmp/opened-pulls.txt | jq -r '.[] | select(.head.ref=="<< parameters.branch_head >>") | .html_url')
            echo "Existing PR: $PR_URL"

            # If no PR exists with the branch "<< parameters.branch_head >>", create one
            # If PR already exists it would be updated with the most recent docs via forced push
            if [ -z "$PR_URL" ]; then
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                https://api.github.com/repos/<< parameters.repo_slug >>/pulls \
                -d '{
                  "title": "<< parameters.commit_message >>",
                  "head": "<< parameters.branch_head >>",
                  "base": "<< parameters.branch_base >>"
                }'
            else
              echo "Pull Request already exists: $PR_URL"
            fi

  github-pr-allow-empty:
    parameters:
      working_directory:
        type: string
      repo_slug:
        type: string
      branch_head:
        type: string
      branch_base:
        type: string
      commit_message:
        type: string
    steps:
      - run:
          working_directory: << parameters.working_directory >>
          name: "Open PR in '<< parameters.repo_slug >>' for '<< parameters.branch_head >>' branch"
          command: |
            git config --global user.email engineering@snxdao.io
            git config --global user.name synthetix-team
            git branch "<< parameters.branch_head >>"
            git checkout "<< parameters.branch_head >>"
            git add .
            git commit --message "<< parameters.commit_message >>" --allow-empty
            git push --set-upstream --force origin "<< parameters.branch_head >>"

            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/<< parameters.repo_slug >>/pulls?state=open | tee /tmp/opened-pulls.txt

            PR_URL=$(cat /tmp/opened-pulls.txt | jq -r '.[] | select(.head.ref=="<< parameters.branch_head >>") | .html_url')
            echo "Existing PR: $PR_URL"

            if [ -z "$PR_URL" ]; then
              # If no PR exists with the branch "<< parameters.branch_head >>", create one
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                https://api.github.com/repos/<< parameters.repo_slug >>/pulls \
                -d '{
                  "title": "<< parameters.commit_message >>",
                  "head": "<< parameters.branch_head >>", 
                  "base": "<< parameters.branch_base >>"
                }'
            else
              # If PR already exists do nothing, it would be updated via forced push
              echo "Pull Request already exists: $PR_URL"
            fi

jobs:
  lint:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn dedupe --check
      - run: yarn pretty:check

  fork-test:
    parameters:
      toml:
        type: string
      chain-id:
        type: integer
      provider-url:
        type: string
      package:
        type: string
      preset:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-anvil
      - yarn-install

      - run:
          name: "Build new package upgrading from << parameters.package >>@<< parameters.preset >> and keep RPC running"
          background: true
          command: |
            yarn cannon build << parameters.toml >> \
              --keep-alive \
              --port 8545 \
              --dry-run \
              --upgrade-from << parameters.package >>@<< parameters.preset >> \
              --chain-id << parameters.chain-id >> \
              --provider-url << parameters.provider-url >> \
                | tee ./cannon-build.log

      - run:
          name: "Wait for cannon to complete the build"
          command: |
            touch ./cannon-build.log
            # If the information wasn't found, start tailing the log
            if ! grep -q 'Built package RPC URL available' ./cannon-build.log; then
                while IFS= read -r line
                do
                    if [[ $line == *"Built package RPC URL available"* ]]; then
                        break
                    fi
                done < <(tail -f -n0 ./cannon-build.log)
            fi

      - store_artifacts:
          path: "./cannon-build.log"

      - run: grep 'ðŸ’¥' ./cannon-build.log

      - run:
          name: "Check for Proxies redeployment"
          environment:
            PROXIES: "contract.InitialCoreProxy contract.InitialProxy contract.InitialSpotMarketProxy"
          command: |
            for PROXY in $PROXIES; do
              echo "grep -c "Executing [$PROXY]" ./cannon-build.log"
              if [ $(grep -c "Executing [$PROXY]" ./cannon-build.log) -gt 0 ]; then
                echo "Proxy $PROXY was modified"
                exit 1
              fi
            done

      - run:
          name: "Extract cannon state"
          command: node e2e/extractCannonState ./cannon-build.log > ./cannon-state.json

      - run:
          name: "Generate deployments"
          command: node e2e/generateDeployments ./cannon-state.json

      - store_artifacts:
          path: "./e2e/deployments"

      - run:
          name: "Debug logs"
          background: true
          command: |
            touch "./debug-<< parameters.chain-id >>-<< parameters.preset >>.log"
            tail -f "./debug-<< parameters.chain-id >>-<< parameters.preset >>.log"

      - run:
          name: "Run tests"
          environment:
            DEBUG: "e2e:*"
            DEBUG_TARGET: "./debug-<< parameters.chain-id >>-<< parameters.preset >>.log"
            GAS_REPORT: "./gas-<< parameters.chain-id >>-<< parameters.preset >>.csv"
          command: |
            TEST_FILES=$(circleci tests glob 'e2e/tests/<< parameters.toml >>/*.e2e.js')
            echo "$TEST_FILES" | circleci tests run --verbose --split-by=timings --command="xargs yarn mocha --no-bail --exit"

      - store_artifacts:
          path: "./debug-<< parameters.chain-id >>-<< parameters.preset >>.log"

      - store_artifacts:
          path: "./gas-<< parameters.chain-id >>-<< parameters.preset >>.csv"

  fork-test-new:
    parameters:
      toml:
        type: string
      chain-id:
        type: integer
      provider-url:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-anvil
      - yarn-install

      - run:
          name: "Build new package and keep RPC running"
          background: true
          command: |
            yarn cannon build << parameters.toml >> \
              --keep-alive \
              --port 8545 \
              --dry-run \
              --chain-id << parameters.chain-id >> \
              --provider-url << parameters.provider-url >> \
                | tee ./cannon-build.log

      - run:
          name: "Wait for cannon to complete the build"
          command: |
            touch ./cannon-build.log
            # If the information wasn't found, start tailing the log
            if ! grep -q 'Built package RPC URL available' ./cannon-build.log; then
                while IFS= read -r line
                do
                    if [[ $line == *"Built package RPC URL available"* ]]; then
                        break
                    fi
                done < <(tail -f -n0 ./cannon-build.log)
            fi

      - store_artifacts:
          path: "./cannon-build.log"

      - run: grep 'ðŸ’¥' ./cannon-build.log

      - run:
          name: "Extract cannon state"
          command: node e2e/extractCannonState ./cannon-build.log > ./cannon-state.json

      - run:
          name: "Generate deployments"
          command: node e2e/generateDeployments ./cannon-state.json

      - store_artifacts:
          path: "./e2e/deployments"

      - run:
          name: "Run tests"
          environment:
            DEBUG: "e2e:*"
          command: |
            TEST_FILES=$(circleci tests glob 'e2e/tests/<< parameters.toml >>/*.e2e.js')
            echo "$TEST_FILES" | circleci tests run --verbose --split-by=timings --command="xargs yarn mocha --no-bail --exit"

  deployment-info:
    parameters:
      package:
        type: string
      chain-id:
        type: integer
      preset:
        type: string
      provider-url:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-anvil
      - run-anvil:
          provider-url: << parameters.provider-url >>
      - yarn-install
      - wait-for-anvil

      - run:
          name: "Extract cannon state"
          command: yarn cannon inspect << parameters.package >>@<< parameters.preset >> --chain-id << parameters.chain-id >> --json > ./cannon-state.json

      - run:
          name: "Generate deployments"
          command: node e2e/generateDeployments ./cannon-state.json

      - store_artifacts:
          path: "./e2e/deployments"

      - run:
          name: "Generate docs"
          environment:
            DEBUG: "e2e:*"
          command: |
            mkdir -p docs
            node e2e/docgen > docs/<< parameters.chain-id >>-<< parameters.preset >>.md

      - store_artifacts:
          path: "./docs"

      - add_ssh_keys:
          fingerprints:
            - "SHA256:5ZmBzDxKOn7bPLBV59jNb++t6inHRCI9k0TwULJWYxA" # Synthetix-Gitbook-v3
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - run:
          working_directory: ~/
          name: "Checkout synthetix-gitbook-v3"
          command: |
            git clone git@github.com:Synthetixio/Synthetix-Gitbook-v3.git --verbose --depth 1 --no-tags --single-branch synthetix-gitbook-v3

      - run:
          name: "Update synthetix-gitbook-v3"
          command: |
            mkdir -p ~/synthetix-gitbook-v3/for-developers/deployment-info
            cp docs/<< parameters.chain-id >>-<< parameters.preset >>.md ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>.md

            mkdir -p ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>
            cp e2e/deployments/abi/*.json ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/meta.json ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/extras.json ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/cannon.json ~/synthetix-gitbook-v3/deployment-info/<< parameters.chain-id >>-<< parameters.preset >>/

      - github-pr:
          working_directory: "~/synthetix-gitbook-v3"
          repo_slug: "Synthetixio/Synthetix-Gitbook-v3"
          branch_head: "deployment-info-<< parameters.chain-id >>-<< parameters.preset >>"
          branch_base: en
          commit_message: "Update deployment info for << parameters.chain-id >>-<< parameters.preset >>"

  npm-package:
    parameters:
      package:
        type: string
      chain-id:
        type: integer
      preset:
        type: string
      provider-url:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-anvil
      - yarn-install

      - run:
          name: "Extract cannon state"
          command: yarn cannon inspect << parameters.package >>@<< parameters.preset >> --chain-id << parameters.chain-id >> --json > ./cannon-state.json

      - run:
          name: "Generate deployments"
          command: node e2e/generateDeployments ./cannon-state.json

      - store_artifacts:
          path: "./e2e/deployments"

      - add_ssh_keys:
          fingerprints:
            - "SHA256:su5uak7HO/FZN8fbZtpol0nrh1Ah/MiH49NmCVkNFEg" # v3-contracts
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - run:
          working_directory: ~/
          name: "Checkout v3-contracts"
          command: |
            git clone git@github.com:Synthetixio/v3-contracts.git --verbose --depth 1 --no-tags --single-branch v3-contracts

      - run:
          name: "Update v3-contracts"
          command: |
            mkdir -p ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>
            cp e2e/deployments/abi/*.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/meta.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/extras.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/cannon.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/

      - github-pr:
          working_directory: "~/v3-contracts"
          repo_slug: "Synthetixio/v3-contracts"
          branch_head: "<< parameters.chain-id >>-<< parameters.preset >>"
          branch_base: master
          commit_message: "Update << parameters.chain-id >>-<< parameters.preset >>"

  preview:
    parameters:
      toml:
        type: string
      package:
        type: string
      chain-id:
        type: integer
      preset:
        type: string
      provider-url:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-anvil
      - yarn-install

      - run:
          name: "Build new package upgrading from << parameters.package >>@<< parameters.preset >>"
          command: |
            yarn cannon build << parameters.toml >> \
              --dry-run \
              --upgrade-from << parameters.package >>@<< parameters.preset >> \
              --chain-id << parameters.chain-id >> \
              --provider-url << parameters.provider-url >> \
                | tee ./cannon-build.log

            export NEW_CANNON_PACKAGE=$(grep -o 'ðŸ’¥ .* built on' cannon-build.log | awk '{print $2}')
            echo "NEW_CANNON_PACKAGE=${NEW_CANNON_PACKAGE}"
            echo "export NEW_CANNON_PACKAGE=$NEW_CANNON_PACKAGE" >> $BASH_ENV

      - run:
          name: "Extract cannon state"
          command: yarn cannon inspect $NEW_CANNON_PACKAGE --chain-id << parameters.chain-id >> --json > ./cannon-state.json

      - run:
          name: "Generate deployments"
          command: node e2e/generateDeployments ./cannon-state.json

      - store_artifacts:
          path: "./e2e/deployments"

      - add_ssh_keys:
          fingerprints:
            - "SHA256:su5uak7HO/FZN8fbZtpol0nrh1Ah/MiH49NmCVkNFEg" # v3-contracts
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - run:
          working_directory: ~/
          name: "Checkout v3-contracts"
          command: |
            git clone git@github.com:Synthetixio/v3-contracts.git --verbose --depth 1 --no-tags --single-branch v3-contracts

      - run:
          name: "Update v3-contracts"
          command: |
            mkdir -p ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>
            cp e2e/deployments/abi/*.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/meta.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/extras.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/
            cp e2e/deployments/cannon.json ~/v3-contracts/<< parameters.chain-id >>-<< parameters.preset >>/

      - github-pr-allow-empty:
          working_directory: "~/v3-contracts"
          repo_slug: "Synthetixio/v3-contracts"
          branch_head: "next-<< parameters.chain-id >>-<< parameters.preset >>"
          branch_base: master
          commit_message: "[NEXT] << parameters.chain-id >>-<< parameters.preset >> DO NOT MERGE!"

workflows:
  version: 2.1

  tests:
    unless:
      or:
        #- equal: ["docgen", << pipeline.git.branch >>]
        #- equal: ["v3-contracts-npm-package", << pipeline.git.branch >>]
        - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
    jobs:
      - lint

      - fork-test:
          name: base-sepolia-andromeda
          toml: omnibus-base-sepolia-andromeda.toml
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 84532
          provider-url: https://sepolia.base.org

      - fork-test:
          name: base-mainnet-andromeda
          toml: omnibus-base-mainnet-andromeda.toml
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 8453
          provider-url: https://mainnet.base.org

      - fork-test:
          name: mainnet
          toml: omnibus-mainnet.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 1
          provider-url: https://mainnet.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: optimism-mainnet
          toml: omnibus-optimism-mainnet.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 10
          provider-url: https://optimism-mainnet.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: sepolia
          toml: omnibus-sepolia.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 11155111
          provider-url: https://sepolia.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: polygon-mumbai
          toml: omnibus-polygon-mumbai.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 80001
          provider-url: https://polygon-mumbai.infura.io/v3/$INFURA_API_KEY

      - fork-test:
          name: arbthetix-mainnet
          toml: omnibus-arbitrum-mainnet-arbthetix.toml
          package: "synthetix-omnibus:latest"
          preset: "arbthetix"
          chain-id: 42161
          provider-url: https://arbitrum-mainnet.infura.io/v3/$INFURA_API_KEY

      #- fork-test-new:
      #    name: arbthetix-sepolia
      #    toml: omnibus-arbitrum-sepolia-arbthetix.toml
      #    #package: "synthetix-omnibus:latest"
      #    #preset: "arbthetix"
      #    chain-id: 421614
      #    provider-url: https://arbitrum-sepolia.infura.io/v3/$INFURA_API_KEY

  deployment-info:
    when:
      or:
        - and:
            - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
            - equal: ["deployment-info", << pipeline.schedule.name >>]
        - equal: ["docgen", << pipeline.git.branch >>]

    jobs:
      - deployment-info:
          name: docs-base-sepolia-andromeda
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 84532
          provider-url: https://sepolia.base.org

      - deployment-info:
          name: docs-base-mainnet-andromeda
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 8453
          provider-url: https://mainnet.base.org

      - deployment-info:
          name: docs-mainnet
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 1
          provider-url: https://mainnet.infura.io/v3/$INFURA_API_KEY

      - deployment-info:
          name: docs-sepolia
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 11155111
          provider-url: https://sepolia.infura.io/v3/$INFURA_API_KEY

      - deployment-info:
          name: docs-optimism-mainnet
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 10
          provider-url: https://optimism-mainnet.infura.io/v3/$INFURA_API_KEY

  npm-package:
    when:
      or:
        - and:
            - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
            - equal: ["npm-package", << pipeline.schedule.name >>]
        - equal: ["v3-contracts-npm-package", << pipeline.git.branch >>]

    jobs:
      - npm-package:
          name: npm-base-sepolia-andromeda
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 84532
          provider-url: https://sepolia.base.org

      - npm-package:
          name: npm-base-mainnet-andromeda
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 8453
          provider-url: https://mainnet.base.org

      - npm-package:
          name: npm-mainnet
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 1
          provider-url: https://mainnet.infura.io/v3/$INFURA_API_KEY

      - npm-package:
          name: npm-sepolia
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 11155111
          provider-url: https://sepolia.infura.io/v3/$INFURA_API_KEY

      - npm-package:
          name: npm-optimism-mainnet
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 10
          provider-url: https://optimism-mainnet.infura.io/v3/$INFURA_API_KEY

  preview:
    when:
      or:
        - and:
            - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
            - equal: ["preview", << pipeline.schedule.name >>]
        - equal: ["v3-contracts-preview", << pipeline.git.branch >>]

    jobs:
      - preview:
          name: preview-mainnet
          toml: omnibus-mainnet.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 1
          provider-url: https://mainnet.infura.io/v3/$INFURA_API_KEY

      - preview:
          name: preview-sepolia
          toml: omnibus-sepolia.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 11155111
          provider-url: https://sepolia.infura.io/v3/$INFURA_API_KEY

      - preview:
          name: preview-optimism-mainnet
          toml: omnibus-optimism-mainnet.toml
          package: "synthetix-omnibus:latest"
          preset: "main"
          chain-id: 10
          provider-url: https://optimism-mainnet.infura.io/v3/$INFURA_API_KEY

      - preview:
          name: preview-base-mainnet-andromeda
          toml: omnibus-base-mainnet-andromeda.toml
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 8453
          provider-url: https://mainnet.base.org

      - preview:
          name: preview-base-sepolia-andromeda
          toml: omnibus-base-sepolia-andromeda.toml
          package: "synthetix-omnibus:latest"
          preset: "andromeda"
          chain-id: 84532
          provider-url: https://sepolia.base.org
