name = "synthetix-omnibus"
version = "18"
description = "Arbitrum deployment"
preset = "main"
include = [
    "tomls/core.toml",
    "tomls/markets/spot-factory.toml",
    "tomls/omnibus-arbitrum-sepolia/perps-highcap-factory.toml",
    "tomls/omnibus-arbitrum-sepolia/permit-deniers.toml",

    "tomls/omnibus-arbitrum-sepolia/permissions.toml",
    "tomls/omnibus-arbitrum-sepolia/pools/spartan-council.toml",

    # USDC
    "tomls/oracles/pyth-usdc.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/usdc.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ARB_rewards_for_USDC_lp.toml",

    # DAI
    "tomls/oracles/pyth-dai.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/dai.toml",

    # ARB
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-arb.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/arb.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ARB_rewards_for_ARB_lp.toml",

    # WETH
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-eth.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/weth.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ARB_rewards_for_WETH_lp.toml",

    # sUSDe
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sUSDe.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/sUSDe.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ARB_rewards_for_sUSDe_lp.toml",

    # USDe
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-USDe.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/USDe.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ARB_rewards_for_USDe_lp.toml",

    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-btc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sol.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-wif.toml",

    # Spot Markets
    "tomls/omnibus-arbitrum-sepolia/spot/dai.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/eth.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/btc.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/usdc.toml",

    #
    # Perps
    #

    # Perps Settings
    "tomls/omnibus-arbitrum-sepolia/perps/perps-keeper-cost.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/global.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/referrers.toml",
    # Perps Markets
    "tomls/omnibus-arbitrum-sepolia/perps/markets/btc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/eth.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sol.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/wif.toml",

    # Margin Collateral (Synths)
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/usd.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/eth.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/btc.toml",
]

[setting.target_preset]
defaultValue = "main"

[setting.salt]
defaultValue = "snax"

[setting.snx_package]
defaultValue = "synthetix:3.3.18"

[setting.perps_keeper_cost_package]
defaultValue = "arbitrum-gas-price-oracle:3.3.16"

[setting.spot_market_package]
defaultValue = "synthetix-spot-market:3.3.21-dev.fd4c5628"

[setting.perps_market_package]
defaultValue = "synthetix-perps-market:3.4.1"

[setting.buyback_snx_package]
defaultValue = "buyback-snx:3.3.15"
description = "Do not update! This package isn't upgradeable. A version change will deploy a new contract."

[setting.pyth_price_verification_address]
defaultValue = "0x4374e5a8b9C22271E9EB878A2AA31DE97DF15DAF"
description = "https://docs.pyth.network/price-feeds/contract-addresses/evm#testnets"

[setting.pyth_feed_url]
defaultValue = "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}"
description = "Pyth settlement strategy config"

[provision.pyth_erc7412_wrapper]
source = "pyth-erc7412-wrapper:3.3.15"
targetPreset = "<%= settings.target_preset %>"
options.salt = "<%= settings.salt %>"
options.pythAddress = "<%= settings.pyth_price_verification_address %>"

[setting.owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.deployer]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.minimum_liquidity_ratio]
defaultValue = "<%= parseEther('2.00') %>"
description = "200% min market collateralization"

[invoke.CoreProxy_setMinLiquidityRatio]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= settings.minimum_liquidity_ratio %>"]

[setting.account_withdraw_timeout]
defaultValue = "<%= hexZeroPad(hexlify(parseInt(1 * 24 * 3600)), 32) %>"

[invoke.CoreProxy_setConfig_accountTimeoutWithdraw]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= settings.account_withdraw_timeout %>",
]

[setting.spartan_council_pool_id_setting]
defaultValue = "1"

[setting.pool_owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.commitment_price_delay]
defaultValue = "2"

[setting.big_cap_default_staleness_tolerance]
defaultValue = "3600"

[setting.big_cap_strict_staleness_tolerance]
defaultValue = "60"

[setting.big_cap_settlement_window_duration]
defaultValue = "60"

[setting.big_cap_settlement_delay]
defaultValue = "2"

[setting.settlement_reward]
defaultValue = "<%= parseEther('0.5') %>"

[setting.settlement_minimum_usd_exchange_amount]
defaultValue = "<%= parseEther('0.000001') %>"

[setting.settlement_max_rounding_loss]
defaultValue = "<%= parseEther('0.000001') %>"

[setting.price_deviation_tolerance]
defaultValue = "<%= parseEther('1') %>"

[setting.usdc_staleness_tolerance]
defaultValue = "<%= String(1 * 3600) %>"
description = "1 hour"

[setting.dai_staleness_tolerance]
defaultValue = "<%= String(1 * 3600) %>"
description = "1 hour"

#
#
#
# USDC
#
#
#
[setting.usdc_address]
defaultValue = "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d"
description = "https://developers.circle.com/stablecoins/docs/usdc-on-test-networks"

[setting.pyth_feed_id_usdc]
defaultValue = "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

[setting.synth_usdc_max_market_collateral]
defaultValue = "<%= parseEther(String(10_000_000)) %>"

[setting.max_collateral_limit_usdc]
defaultValue = "<%= parseEther(String(10_000_000)) %>"

#
#
#
# DAI
#
#
#
[provision.dai_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@dai"
options.name = "Fake DAI Coin"
options.symbol = "fDAI"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[setting.dai_address]
defaultValue = "<%= imports.dai_mock_collateral.contracts.MintableToken.address %>"
description = "Using mock for testnet"

[setting.pyth_feed_id_dai]
defaultValue = "0xb0948a5e5313200c632b51bb5ca32f6de0d36e9950a942d19751e833f70dabfd"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

[setting.synth_dai_max_market_collateral]
defaultValue = "<%= parseEther(String(0)) %>"

[setting.max_collateral_limit_dai]
defaultValue = "<%= parseEther(String(0)) %>"

#
#
#
# WETH
#
#
#
[setting.weth_address]
defaultValue = "0x980B62Da83eFf3D4576C647993b0c1D7faf17c73"
description = "https://docs.arbitrum.io/build-decentralized-apps/reference/useful-addresses#core-contracts-1"

[setting.pyth_feed_id_eth]
defaultValue = "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

[setting.max_collateral_limit_weth]
defaultValue = "<%= parseEther(String(5_400)) %>"

#
#
#
# ARB
#
#
#
[provision.arb_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@arb"
options.name = "Fake ARB Coin"
options.symbol = "fARB"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[setting.arb_address]
defaultValue = "<%= imports.arb_mock_collateral.contracts.MintableToken.address %>"
description = "Using mock for testnet"

[setting.pyth_feed_id_arb]
defaultValue = "0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

[setting.max_collateral_limit_arb]
defaultValue = "<%= parseEther(String(10_000_000)) %>"

#
#
#
# sUSDe
#
#
#
[provision.sUSDe_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@sUSDe"
options.name = "Fake sUSDe Coin"
options.symbol = "fsUSDe"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[setting.sUSDe_address]
defaultValue = "<%= imports.sUSDe_mock_collateral.contracts.MintableToken.address %>"
description = "Using mock for testnet sUSDe"

[setting.pyth_feed_id_sUSDe]
defaultValue = "0xca3ba9a619a4b3755c10ac7d5e760275aa95e9823d38a84fedd416856cdba37c"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

#
#
#
# USDe
#
#
#
[provision.USDe_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@USDe"
options.name = "Fake USDe Coin"
options.symbol = "fUSDe"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[setting.USDe_address]
defaultValue = "<%= imports.USDe_mock_collateral.contracts.MintableToken.address %>"
description = "Using mock for testnet USDe"

[setting.pyth_feed_id_USDe]
defaultValue = "0x6ec879b1e9963de5ee97e9c8710b742d6228252a5e2ca12d4ae81d7fe5ee8c5d"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

#
#
#
# SOL
#
#
#
[setting.pyth_feed_id_sol]
defaultValue = "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

#
#
#
# WIF
#
#
#
[setting.pyth_feed_id_wif]
defaultValue = "0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

#
#
#
# BTC
#
#
#
[setting.pyth_feed_id_btc]
defaultValue = "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43"
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"

[invoke.CoreProxy_setPoolConfiguration_SpartanCouncil]
target = ["system.CoreProxy"]
fromCall.func = "getPoolOwner"
fromCall.args = ["<%= extras.spartan_council_pool_id %>"]
func = "setPoolConfiguration"
args = [
    "<%= extras.spartan_council_pool_id %>",
    [
        { marketId = "<%= extras.synth_dai_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= extras.synth_usdc_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= extras.synth_btc_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= extras.synth_eth_market_id %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
        { marketId = "<%= imports.perpsFactory.extras.superMarketId %>", weightD18 = 98, maxDebtShareValueD18 = "<%= parseEther('1') %>" },
    ],
]

[setting.usd_token_name]
defaultValue = "<%= formatBytes32String('USDToken') %>"

[invoke.CoreProxy_initOrUpgradeToken_USDToken]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "initOrUpgradeToken"
args = [
    "<%= settings.usd_token_name %>",
    "Synthetix USD",
    "USDx",
    18,
    "<%= imports.system.contracts.USDRouter.address %>",
]
