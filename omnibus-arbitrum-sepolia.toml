name = "synthetix-omnibus"
version = "36"
description = "Arbitrum deployment"
preset = "main"
include = [
    "tomls/omnibus-arbitrum-sepolia/core.toml",
    "tomls/markets/spot-factory.toml",
    "tomls/omnibus-arbitrum-sepolia/perps-highcap-factory.toml",
    "tomls/omnibus-arbitrum-sepolia/permit-deniers.toml",

    "tomls/omnibus-arbitrum-sepolia/permissions.toml",
    "tomls/omnibus-arbitrum-sepolia/pools/spartan-council.toml",

    # System collaterals
    "tomls/omnibus-arbitrum-sepolia/collaterals/usdc.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/dai.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/arb.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/usde.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/weth.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/susde.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/btc.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/sol.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/wsteth.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/weeth.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/synth-btc.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/synth-eth.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/synth-sol.toml",
    "tomls/omnibus-arbitrum-sepolia/collaterals/synth-usde.toml",

    # LP Rewards
    "tomls/omnibus-arbitrum-sepolia/rewards/arb_rewards_for_usdc_lp.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/arb_rewards_for_arb_lp.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/arb_rewards_for_weth_lp.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/arb_rewards_for_susde_lp.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/arb_rewards_for_usde_lp.toml",

    # Perps Liquidation rewards
    "tomls/omnibus-arbitrum-sepolia/rewards/sbtc_perps_liquidations_rewards.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/seth_perps_liquidations_rewards.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/ssol_perps_liquidations_rewards.toml",
    "tomls/omnibus-arbitrum-sepolia/rewards/susde_perps_liquidations_rewards.toml",

    # Pyth oracles
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-aave.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ada.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-algo.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-apt.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-arb.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-arkm.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-atom.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-avax.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-axl.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-axs.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-bal.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-bch.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-blur.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-bnb.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-bome.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-bonk.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-btc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-comp.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-crv.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-dai.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-doge.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-dot.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-dydx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-eigen.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ena.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-eos.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-etc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-eth.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ethbtc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ethfi.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-fil.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-flow.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ftm.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-fxs.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-gala.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-gmx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-grt.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-icp.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-imx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-inj.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-io.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-jto.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-jup.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ldo.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-link.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ltc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-meme.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-mew.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-mkr.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-near.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-not.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-op.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ordi.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-pendle.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-people.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-pepe.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-pol.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-popcat.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-pyth.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-render.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-rune.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sats.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sei.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-shib.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-snx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sol.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-strk.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-stx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sui.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-susde.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-sushi.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-tao.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-tia.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-ton.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-trx.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-uni.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-usdc.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-usde.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-w.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-weeth.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-wif.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-wld.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-wsteth.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-xlm.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-xrp.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-yfi.toml",
    "tomls/omnibus-arbitrum-sepolia/oracles/pyth-zro.toml",

    # Spot Markets
    "tomls/omnibus-arbitrum-sepolia/spot/dai.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/sol.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/usdc.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/usde.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/wbtc.toml",
    "tomls/omnibus-arbitrum-sepolia/spot/weth.toml",

    #
    # Perps
    #

    # Perps Settings
    "tomls/omnibus-arbitrum-sepolia/perps/perps-keeper-cost.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/global.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/referrers.toml",

    # Perps Markets
    "tomls/omnibus-arbitrum-sepolia/perps/markets/aave.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ada.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/algo.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/apt.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/arb.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/arkm.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/atom.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/avax.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/axl.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/axs.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/bal.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/bch.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/blur.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/bnb.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/bome.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/bonk.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/btc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/comp.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/crv.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/doge.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/dot.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/dydx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/eigen.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ena.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/eos.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/etc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/eth.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ethbtc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ethfi.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/fil.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/flow.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ftm.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/fxs.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/gala.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/gmx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/grt.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/icp.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/imx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/inj.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/io.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/jto.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/jup.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ldo.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/link.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ltc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/meme.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/mew.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/mkr.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/near.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/not.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/op.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ordi.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/pendle.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/people.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/pepe.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/pol.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/popcat.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/pyth.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/render.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/rune.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sats.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sei.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/shib.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/snx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sol.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/strk.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/stx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sui.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/sushi.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/tao.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/tia.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/ton.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/trx.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/uni.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/w.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/wif.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/wld.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/xlm.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/xrp.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/yfi.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/markets/zro.toml",

    # Margin Collateral (Synths)
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/usd.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/eth.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/btc.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/usde.toml",
    "tomls/omnibus-arbitrum-sepolia/perps/collaterals/sol.toml",
]

[setting.target_preset]
defaultValue = "main"

[setting.salt]
defaultValue = "snax"

[setting.snx_package]
defaultValue = "synthetix:3.8.1"

[setting.oracle_manager_package]
defaultValue = "oracle-manager:3.8.1"

[setting.perps_keeper_cost_package]
defaultValue = "arbitrum-gas-price-oracle:3.3.16"

[setting.spot_market_package]
defaultValue = "synthetix-spot-market:3.8.1"

[setting.perps_market_package]
defaultValue = "synthetix-perps-market:3.9.0"

[setting.buyback_snx_package]
defaultValue = "buyback-snx:3.3.15"
description = "Do not update! This package isn't upgradeable. A version change will deploy a new contract."

[setting.pyth_price_verification_address]
defaultValue = "0x4374e5a8b9C22271E9EB878A2AA31DE97DF15DAF"
description = "https://docs.pyth.network/price-feeds/contract-addresses/evm#testnets"

[setting.pyth_feed_url]
defaultValue = "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}"
description = "Pyth settlement strategy config"

[provision.pyth_erc7412_wrapper]
source = "pyth-erc7412-wrapper:3.3.15"
targetPreset = "<%= settings.target_preset %>"
options.salt = "<%= settings.salt %>"
options.pythAddress = "<%= settings.pyth_price_verification_address %>"

[setting.owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.deployer]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.minimum_liquidity_ratio]
defaultValue = "<%= parseEther('2.00') %>"
description = "200% min market collateralization"

[invoke.CoreProxy_setMinLiquidityRatio]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= settings.minimum_liquidity_ratio %>"]

[setting.account_withdraw_timeout]
defaultValue = "<%= hexZeroPad(hexlify(parseInt(1 * 24 * 3600)), 32) %>"

[invoke.CoreProxy_setConfig_accountTimeoutWithdraw]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= settings.account_withdraw_timeout %>",
]

[setting.spartan_council_pool_id_setting]
defaultValue = "1"

[setting.pool_owner]
defaultValue = "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"

[setting.commitment_price_delay]
defaultValue = "2"

[setting.default_staleness_tolerance]
defaultValue = "3600"

[setting.strict_staleness_tolerance]
defaultValue = "60"

[setting.settlement_window_duration]
defaultValue = "60"

[setting.settlement_delay]
defaultValue = "2"

[setting.settlement_reward]
defaultValue = "<%= parseEther('1') %>"

[setting.settlement_minimum_usd_exchange_amount]
defaultValue = "<%= parseEther('0.000001') %>"

[setting.settlement_max_rounding_loss]
defaultValue = "<%= parseEther('0.000001') %>"

[setting.price_deviation_tolerance]
defaultValue = "<%= parseEther('1') %>"

[var.collateral_limits]
max_collateral_limit_arb = "<%= parseEther(String(10_000_000)) %>"
max_collateral_limit_dai = "<%= parseEther(String(0)) %>"
max_collateral_limit_usdc = "<%= parseEther(String(10_000_000)) %>"
max_collateral_limit_weeth = "<%= parseEther(String(289)) %>"
max_collateral_limit_weth = "<%= parseEther(String(5_400)) %>"
max_collateral_limit_wsteth = "<%= parseEther(String(2_564)) %>"
synth_dai_max_market_collateral = "<%= parseEther(String(0)) %>"
synth_usdc_max_market_collateral = "<%= parseEther(String(10_000_000)) %>"

[provision.dai_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@dai"
options.name = "Fake DAI Coin"
options.symbol = "fDAI"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.arb_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@arb"
options.name = "Fake ARB Coin"
options.symbol = "fARB"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.sUSDe_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@sUSDe"
options.name = "Fake sUSDe Coin"
options.symbol = "fsUSDe"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.USDe_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@USDe"
options.name = "Fake USDe Coin"
options.symbol = "fUSDe"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.btc_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@btc"
options.name = "Fake BTC Coin"
options.symbol = "fBTC"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.SOL_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@sol"
options.name = "Fake SOL Coin"
options.symbol = "fSOL"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.weeth_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@weETH"
options.name = "Fake Wrapped eETH"
options.symbol = "weETH"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[provision.wsteth_mock_collateral]
source = "mintable-token:1.8"
target = "synthetix-mock-tokens:1.8@wstETH"
options.name = "Fake Wrapped liquid staked Ether 2.0"
options.symbol = "wstETH"
options.owner = "<%= settings.owner %>"
options.decimals = "18"

[var.token_addresses]
arb_address = "<%= imports.arb_mock_collateral.contracts.MintableToken.address %>"
dai_address = "<%= imports.dai_mock_collateral.contracts.MintableToken.address %>"
sol_address = "<%= imports.SOL_mock_collateral.contracts.MintableToken.address %>"
susde_address = "<%= imports.sUSDe_mock_collateral.contracts.MintableToken.address %>"
tbtc_address = "<%= imports.btc_mock_collateral.contracts.MintableToken.address %>"
usdc_address = "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d"                              # https://developers.circle.com/stablecoins/docs/usdc-on-test-networks
usde_address = "<%= imports.USDe_mock_collateral.contracts.MintableToken.address %>"
weth_address = "0x980B62Da83eFf3D4576C647993b0c1D7faf17c73"                              # https://docs.arbitrum.io/build-decentralized-apps/reference/useful-addresses#core-contracts-1
wsteth_address = "<%= imports.wsteth_mock_collateral.contracts.MintableToken.address %>" # https://docs.lido.fi/deployed-contracts/#arbitrum Arbitrum 0x5979D7b546E38E414F7E9822514be443A4800529
weeth_address = "<%= imports.weeth_mock_collateral.contracts.MintableToken.address %>"   # https://etherfi.gitbook.io/etherfi/contracts-and-integrations/deployed-contracts Arbitrum 0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe

[var.pyth_feeds]
description = "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet"
pyth_feed_id_aave = "0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445"
pyth_feed_id_ada = "0x2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d"
pyth_feed_id_algo = "0xfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0"
pyth_feed_id_apt = "0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5"
pyth_feed_id_arb = "0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5"
pyth_feed_id_arkm = "0x7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3"
pyth_feed_id_atom = "0xb00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819"
pyth_feed_id_avax = "0x93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7"
pyth_feed_id_axl = "0x60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126"
pyth_feed_id_axs = "0xb7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0"
pyth_feed_id_bal = "0x07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628"
pyth_feed_id_bch = "0x3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3"
pyth_feed_id_blur = "0x856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9"
pyth_feed_id_bnb = "0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f"
pyth_feed_id_bome = "0x30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a"
pyth_feed_id_bonk = "0x72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419"
pyth_feed_id_btc = "0xc9d8b075a5c69303365ae23633d4e085199bf5c520a3b90fed1322a0342ffc33"    # Note, this is the wBTC feed id not the pure BTC feed Id
pyth_feed_id_comp = "0x4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478"
pyth_feed_id_crv = "0xa19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8"
pyth_feed_id_dai = "0xb0948a5e5313200c632b51bb5ca32f6de0d36e9950a942d19751e833f70dabfd"
pyth_feed_id_doge = "0xdcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c"
pyth_feed_id_dot = "0xca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b"
pyth_feed_id_dydx = "0x6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b"
pyth_feed_id_eigen = "0xc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380"
pyth_feed_id_ena = "0xb7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4"
pyth_feed_id_eos = "0x06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31"
pyth_feed_id_etc = "0x7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8"
pyth_feed_id_eth = "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace"
pyth_feed_id_ethbtc = "0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a"
pyth_feed_id_ethfi = "0xb27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a"
pyth_feed_id_fil = "0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e"
pyth_feed_id_flow = "0x2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30"
pyth_feed_id_ftm = "0x5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c"
pyth_feed_id_fxs = "0x735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1"
pyth_feed_id_gala = "0x0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51"
pyth_feed_id_gmx = "0xb962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf"
pyth_feed_id_grt = "0x4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7"
pyth_feed_id_icp = "0xc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67"
pyth_feed_id_imx = "0x941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2"
pyth_feed_id_inj = "0x7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592"
pyth_feed_id_io = "0x82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1"
pyth_feed_id_jto = "0xb43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2"
pyth_feed_id_jup = "0x0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996"
pyth_feed_id_ldo = "0xc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad"
pyth_feed_id_link = "0x8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221"
pyth_feed_id_ltc = "0x6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54"
pyth_feed_id_meme = "0xcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c"
pyth_feed_id_mew = "0x514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d"
pyth_feed_id_mkr = "0x9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378"
pyth_feed_id_near = "0xc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750"
pyth_feed_id_not = "0x75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36"
pyth_feed_id_op = "0x385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf"
pyth_feed_id_ordi = "0x193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0"
pyth_feed_id_pendle = "0x9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016"
pyth_feed_id_people = "0xb7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945"
pyth_feed_id_pepe = "0xd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4"
pyth_feed_id_pol = "0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472"
pyth_feed_id_popcat = "0xb9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce"
pyth_feed_id_pyth = "0x0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff"
pyth_feed_id_render = "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d"
pyth_feed_id_rune = "0x5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e"
pyth_feed_id_sats = "0x40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0"
pyth_feed_id_sei = "0x53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb"
pyth_feed_id_shib = "0xf0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a"
pyth_feed_id_snx = "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3"
pyth_feed_id_sol = "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d"
pyth_feed_id_strk = "0x6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870"
pyth_feed_id_stx = "0xec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17"
pyth_feed_id_sui = "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744"
pyth_feed_id_susde = "0xca3ba9a619a4b3755c10ac7d5e760275aa95e9823d38a84fedd416856cdba37c"
pyth_feed_id_sushi = "0x26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53"
pyth_feed_id_tao = "0x410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af"
pyth_feed_id_tia = "0x09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723"
pyth_feed_id_ton = "0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026"
pyth_feed_id_trx = "0x67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b"
pyth_feed_id_uni = "0x78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501"
pyth_feed_id_usdc = "0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a"
pyth_feed_id_usde = "0x6ec879b1e9963de5ee97e9c8710b742d6228252a5e2ca12d4ae81d7fe5ee8c5d"
pyth_feed_id_w = "0xeff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389"
pyth_feed_id_weeth = "0x9ee4e7c60b940440a261eb54b6d8149c23b580ed7da3139f7f08f4ea29dad395"
pyth_feed_id_wif = "0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc"
pyth_feed_id_wld = "0xd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a"
pyth_feed_id_wsteth = "0x6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784"
pyth_feed_id_xlm = "0xb7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850"
pyth_feed_id_xrp = "0xec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8"
pyth_feed_id_yfi = "0x425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f"
pyth_feed_id_zro = "0x3bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b8018"

[setting.usd_token_name]
defaultValue = "<%= formatBytes32String('USDToken') %>"

[invoke.CoreProxy_initOrUpgradeToken_USDToken]
target = ["system.CoreProxy"]
fromCall.func = "owner"
func = "initOrUpgradeToken"
args = [
    "<%= settings.usd_token_name %>",
    "Synthetix USD",
    "USDx",
    18,
    "<%= imports.system.contracts.USDRouter.address %>",
]
